/**
 * Creates a {@link MetaData} object from the specified lines. The specified tuple is already
 * separated into the label and the
 *
 * @param metaDataStrings (label, meta-data) tuples
 * @return Meta Data object
 */
public static MetaData create(List<Tuple3<String, String, String>> metaDataStrings) {
    Map<Tuple2<String, String>, List<PropertyMetaData>> metaDataMap = new HashMap<>(metaDataStrings.size());
    for (Tuple3<String, String, String> tuple : metaDataStrings) {
        List<PropertyMetaData> propertyMetaDataList;
        if (tuple.f2.length() > 0) {
            String[] propertyStrings = tuple.f2.split(PROPERTY_DELIMITER);
            propertyMetaDataList = new ArrayList<>(propertyStrings.length);
            for (String propertyString : propertyStrings) {
                String[] propertyMetadata = propertyString.split(PROPERTY_TOKEN_DELIMITER, 2);
                String[] propertyTypeTokens = propertyMetadata[1].split(PROPERTY_TOKEN_DELIMITER);
                if (propertyTypeTokens.length == 2 && propertyTypeTokens[0].equals(TypeString.LIST.getTypeString())) {
                    // it's a list with one additional data type (type of list items)
                    propertyMetaDataList.add(new PropertyMetaData(propertyMetadata[0], propertyMetadata[1], getListValueParser(propertyTypeTokens[1])));
                } else if (propertyTypeTokens.length == 3 && propertyTypeTokens[0].equals(TypeString.MAP.getTypeString())) {
                    // it's a map with two additional data types (key type + value type)
                    propertyMetaDataList.add(new PropertyMetaData(propertyMetadata[0], propertyMetadata[1], getMapValueParser(propertyTypeTokens[1], propertyTypeTokens[2])));
                } else {
                    propertyMetaDataList.add(new PropertyMetaData(propertyMetadata[0], propertyMetadata[1], getValueParser(propertyMetadata[1])));
                }
            }
        } else {
            propertyMetaDataList = new ArrayList<>(0);
        }
        metaDataMap.put(new Tuple2<>(tuple.f0, tuple.f1), propertyMetaDataList);
    }
    return new MetaData(metaDataMap);
}
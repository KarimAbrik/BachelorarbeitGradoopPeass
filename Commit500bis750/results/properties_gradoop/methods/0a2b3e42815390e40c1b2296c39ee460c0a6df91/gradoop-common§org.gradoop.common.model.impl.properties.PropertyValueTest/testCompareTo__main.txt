@Test
public void testCompareTo() throws Exception {
    // null
    assertEquals(create(null).compareTo(create(null)), 0);
    // boolean
    validateCompareTo(create(false), create(false), create(true));
    // short
    validateCompareTo(create((short) -10), create((short) -10), create((short) 12));
    validateCompareTo(create((short) 10), create((short) 10), create((short) 12));
    validateCompareTo(create((short) -10), create(-10), create(12));
    validateCompareTo(create((short) 10), create(10), create(12));
    validateCompareTo(create((short) -10), create(-10L), create(12L));
    validateCompareTo(create((short) 10), create(10L), create(12L));
    validateCompareTo(create((short) -10), create(-10F), create(12F));
    validateCompareTo(create((short) 10), create(10F), create(12F));
    validateCompareTo(create((short) -10), create(-10D), create(12D));
    validateCompareTo(create((short) 10), create(10D), create(12D));
    validateCompareTo(create((short) -10), create(BigDecimal.valueOf(-10)), create(BigDecimal.valueOf(12)));
    validateCompareTo(create((short) 10), create(BigDecimal.valueOf(10)), create(BigDecimal.valueOf(12)));
    // int
    validateCompareTo(create(-10), create((short) -10), create((short) 12));
    validateCompareTo(create(10), create((short) 10), create((short) 12));
    validateCompareTo(create(-10), create(-10), create(12));
    validateCompareTo(create(10), create(10), create(12));
    validateCompareTo(create(-10), create(-10L), create(12L));
    validateCompareTo(create(10), create(10L), create(12L));
    validateCompareTo(create(-10), create(-10F), create(12F));
    validateCompareTo(create(10), create(10F), create(12F));
    validateCompareTo(create(-10), create(-10D), create(12D));
    validateCompareTo(create(10), create(10D), create(12D));
    validateCompareTo(create(-10), create(BigDecimal.valueOf(-10)), create(BigDecimal.valueOf(12)));
    validateCompareTo(create(10), create(BigDecimal.valueOf(10)), create(BigDecimal.valueOf(12)));
    // long
    validateCompareTo(create(-10L), create((short) -10), create((short) 12));
    validateCompareTo(create(10L), create((short) 10), create((short) 12));
    validateCompareTo(create(-10L), create(-10), create(12));
    validateCompareTo(create(10L), create(10), create(12));
    validateCompareTo(create(-10L), create(-10L), create(12L));
    validateCompareTo(create(10L), create(10L), create(12L));
    validateCompareTo(create(-10L), create(-10F), create(12F));
    validateCompareTo(create(10L), create(10F), create(12F));
    validateCompareTo(create(-10L), create(-10D), create(12D));
    validateCompareTo(create(10L), create(10D), create(12D));
    validateCompareTo(create(-10L), create(BigDecimal.valueOf(-10)), create(BigDecimal.valueOf(12)));
    validateCompareTo(create(10L), create(BigDecimal.valueOf(10)), create(BigDecimal.valueOf(12)));
    // float
    validateCompareTo(create(-10F), create((short) -10), create((short) 12));
    validateCompareTo(create(10F), create((short) 10), create((short) 12));
    validateCompareTo(create(-10F), create(-10), create(12));
    validateCompareTo(create(10F), create(10), create(12));
    validateCompareTo(create(-10F), create(-10L), create(12L));
    validateCompareTo(create(10F), create(10L), create(12L));
    validateCompareTo(create(-10F), create(-10F), create(12F));
    validateCompareTo(create(10F), create(10F), create(12F));
    validateCompareTo(create(-10F), create(-10D), create(12D));
    validateCompareTo(create(10F), create(10D), create(12D));
    validateCompareTo(create(-10F), create(BigDecimal.valueOf(-10)), create(BigDecimal.valueOf(12)));
    validateCompareTo(create(10F), create(BigDecimal.valueOf(10)), create(BigDecimal.valueOf(12)));
    // double
    validateCompareTo(create(-10D), create((short) -10), create((short) 12));
    validateCompareTo(create(10D), create((short) 10), create((short) 12));
    validateCompareTo(create(-10D), create(-10), create(12));
    validateCompareTo(create(10D), create(10), create(12));
    validateCompareTo(create(-10D), create(-10L), create(12L));
    validateCompareTo(create(10D), create(10L), create(12L));
    validateCompareTo(create(-10D), create(-10F), create(12F));
    validateCompareTo(create(10D), create(10F), create(12F));
    validateCompareTo(create(-10D), create(-10D), create(12D));
    validateCompareTo(create(10D), create(10D), create(12D));
    validateCompareTo(create(-10D), create(BigDecimal.valueOf(-10)), create(BigDecimal.valueOf(12)));
    validateCompareTo(create(10D), create(BigDecimal.valueOf(10)), create(BigDecimal.valueOf(12)));
    //string
    validateCompareTo(create("10"), create("10"), create("12"));
    // BigDecimal
    validateCompareTo(create(BigDecimal.valueOf(-10)), create((short) -10), create((short) 12));
    validateCompareTo(create(BigDecimal.valueOf(10)), create((short) 10), create((short) 12));
    validateCompareTo(create(BigDecimal.valueOf(-10)), create(-10), create(12));
    validateCompareTo(create(BigDecimal.valueOf(10)), create(10), create(12));
    validateCompareTo(create(BigDecimal.valueOf(-10)), create(-10L), create(12L));
    validateCompareTo(create(BigDecimal.valueOf(10)), create(10L), create(12L));
    validateCompareTo(create(BigDecimal.valueOf(-10)), create(-10F), create(12F));
    validateCompareTo(create(BigDecimal.valueOf(10)), create(10F), create(12F));
    validateCompareTo(create(BigDecimal.valueOf(-10)), create(-10D), create(12D));
    validateCompareTo(create(BigDecimal.valueOf(10)), create(10D), create(12D));
    validateCompareTo(create(BigDecimal.valueOf(-10)), create(BigDecimal.valueOf(-10)), create(BigDecimal.valueOf(12)));
    validateCompareTo(create(BigDecimal.valueOf(10)), create(BigDecimal.valueOf(10)), create(BigDecimal.valueOf(12)));
    // GradoopId
    validateCompareTo(create(GradoopId.fromString("583ff8ffbd7d222690a90999")), create(GradoopId.fromString("583ff8ffbd7d222690a90999")), create(GradoopId.fromString("583ff8ffbd7d222690a9099a")));
    // Date
    validateCompareTo(create(DATE_VAL_b), create(DATE_VAL_b), create(DATE_VAL_b.plusDays(1L)));
    // Time
    validateCompareTo(create(TIME_VAL_c), create(TIME_VAL_c), create(TIME_VAL_c.plusSeconds(1L)));
    // DateTime
    validateCompareTo(create(DATETIME_VAL_d), create(DATETIME_VAL_d), create(DATETIME_VAL_d.plusNanos(1L)));
}
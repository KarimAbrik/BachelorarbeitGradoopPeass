@Test
public void testEquals() {
    GradoopId a = GradoopId.get();
    GradoopId b = GradoopId.get();
    GradoopId c = GradoopId.get();
    GradoopIdSet abc = GradoopIdSet.fromExisting(a, b, c);
    assertTrue("equals failed for same object", abc.equals(abc));
    assertTrue("hashCode failed for same object", abc.hashCode() == abc.hashCode());
    GradoopIdSet abc2 = GradoopIdSet.fromExisting(a, b, c);
    assertTrue("equals failed for same ids in same order", abc.equals(abc2));
    assertTrue("hashCode failed for same ids in same order", abc.hashCode() == abc2.hashCode());
    GradoopIdSet cba = GradoopIdSet.fromExisting(c, b, a);
    assertTrue("equals succeeds for same ids in different order", abc.equals(cba));
    assertTrue("hashCode succeeds for same ids in different order", abc.hashCode() == cba.hashCode());
    GradoopIdSet aab = GradoopIdSet.fromExisting(a, a, b);
    GradoopIdSet abb = GradoopIdSet.fromExisting(a, b, b);
    assertTrue("equals succeeds for same ids in different cardinality", aab.equals(abb));
    assertTrue("hashCode succeeds for same ids in different cardinality", aab.hashCode() == abb.hashCode());
    GradoopIdSet ab = GradoopIdSet.fromExisting(a, b);
    assertTrue("equals succeeds for same ids but different sizes", aab.equals(ab));
    assertTrue("hashCode succeeds for same ids but different sizes", aab.hashCode() == ab.hashCode());
    GradoopIdSet empty = new GradoopIdSet();
    assertTrue("equals failed for one empty list", !abc.equals(empty));
    assertTrue("hashCode failed for one empty list", abc.hashCode() != empty.hashCode());
    GradoopIdSet empty2 = new GradoopIdSet();
    assertTrue("equals failed for two empty lists", empty2.equals(empty));
    assertTrue("hashCode failed two one empty lists", empty2.hashCode() == empty.hashCode());
}
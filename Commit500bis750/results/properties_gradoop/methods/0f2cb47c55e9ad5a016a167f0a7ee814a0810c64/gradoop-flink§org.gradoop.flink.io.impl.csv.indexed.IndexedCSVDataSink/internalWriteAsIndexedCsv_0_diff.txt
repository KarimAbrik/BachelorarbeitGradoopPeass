/**
 * Writes a {@link Tuple} DataSet as CSV file(s) to the specified location with the specified field and line delimiters.<br>
 * <b>Note: Only a Tuple DataSet can written as a CSV file.</b><br>
 * For each Tuple field the result of {@link Object#toString()} is written.
 *
 * @param dataSet The Tuple that should be writen in the CSV file.
 * @param filePath The path pointing to the location the CSV file is written to.
 * @param rowDelimiter The row delimiter to separate Tuples.
 * @param fieldDelimiter The field delimiter to separate Tuple fields.
 * @param writeMode The behavior regarding existing files. Options are NO_OVERWRITE and OVERWRITE.
 * @param <X> Tuple for indexed CSV file format.
 * @return An indexed CSV file format for the tuple.
 *
 * references to: {@link DataSet#writeAsCsv(String, String, String, WriteMode)}
 */
@SuppressWarnings("unchecked")
private <X extends Tuple> IndexedCSVFileFormat<X> internalWriteAsIndexedCsv(DataSet dataSet, Path filePath, String rowDelimiter, String fieldDelimiter, WriteMode writeMode) {
    Preconditions.checkArgument(dataSet.getType().isTupleType(), "The writeAsCsv() method can only be used on data sets of tuples.");
    IndexedCSVFileFormat<X> of = new IndexedCSVFileFormat<>(filePath, rowDelimiter, fieldDelimiter);
    of.setWriteMode(writeMode);
    return of;
}
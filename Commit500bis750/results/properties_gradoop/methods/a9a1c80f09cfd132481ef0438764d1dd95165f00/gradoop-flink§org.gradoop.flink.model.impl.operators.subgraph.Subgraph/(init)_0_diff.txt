/**
 * Creates a new sub graph operator instance.
 *
 * If both parameters are not {@code null}, the operator returns the subgraph
 * defined by filtered vertices and edges.
 *
 * If the {@code edgeFilterFunction} is {@code null}, the operator returns the
 * vertex-induced subgraph.
 *
 * If the {@code vertexFilterFunction} is {@code null}, the operator returns
 * the edge-induced subgraph.
 *
 * @param vertexFilterFunction  vertex filter function
 * @param edgeFilterFunction    edge filter function
 * @param strategy              sets the execution strategy for the operator
 */
public Subgraph(FilterFunction<Vertex> vertexFilterFunction, FilterFunction<Edge> edgeFilterFunction, Strategy strategy) {
    if ((strategy == BOTH || strategy == BOTH_VERIFIED) && vertexFilterFunction == null && edgeFilterFunction == null) {
        throw new IllegalArgumentException("No filter functions was given.");
    }
    if (strategy == VERTEX_INDUCED && vertexFilterFunction == null) {
        throw new IllegalArgumentException("No vertex filter functions was given.");
    }
    if ((strategy == EDGE_INDUCED || strategy == EDGE_INDUCED_PROJECT_FIRST) && edgeFilterFunction == null) {
        throw new IllegalArgumentException("No vertex edge functions was given.");
    }
    this.strategy = strategy;
    this.vertexFilterFunction = vertexFilterFunction;
    this.edgeFilterFunction = edgeFilterFunction;
}
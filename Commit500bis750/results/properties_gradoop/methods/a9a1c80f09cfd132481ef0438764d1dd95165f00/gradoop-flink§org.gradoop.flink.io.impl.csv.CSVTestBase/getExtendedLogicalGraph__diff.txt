/**
 * Get a logical graph with the schema and all properties of "input_extended_properties" csv
 * graph from resources directory. A GDL file can not be used while types like
 * LocalDate etc. are not supported.
 *
 * @return the logical graph representing the expected graph
 */
protected LogicalGraph getExtendedLogicalGraph() {
    GradoopId idUser = GradoopId.get();
    GradoopId idPost = GradoopId.get();
    GradoopIdSet heads = GradoopIdSet.fromExisting();
    Properties properties = Properties.createFromMap(PROPERTY_MAP);
    DataSet<Vertex> vertices = getExecutionEnvironment().fromElements(new Vertex(idUser, "User", properties, heads), new Vertex(idPost, "Post", properties, heads));
    DataSet<Edge> edges = getExecutionEnvironment().fromElements(new Edge(GradoopId.get(), "creatorOf", idUser, idPost, properties, heads));
    return getConfig().getLogicalGraphFactory().fromDataSets(vertices, edges);
}
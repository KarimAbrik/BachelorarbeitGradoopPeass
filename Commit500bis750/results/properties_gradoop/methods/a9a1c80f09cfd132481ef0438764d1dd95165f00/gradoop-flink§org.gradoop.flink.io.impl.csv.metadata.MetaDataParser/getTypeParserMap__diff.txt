/**
 * Creates the type - parser function mapping of static property TYPE_PARSER_MAP
 *
 * @return a HashMap containing the mapping of a type string to its corresponding parsing function
 */
private static Map<String, Function<String, Object>> getTypeParserMap() {
    Map<String, Function<String, Object>> map = new HashMap<>();
    map.put(TypeString.SHORT.getTypeString(), Short::parseShort);
    map.put(TypeString.INTEGER.getTypeString(), Integer::parseInt);
    map.put(TypeString.LONG.getTypeString(), Long::parseLong);
    map.put(TypeString.FLOAT.getTypeString(), Float::parseFloat);
    map.put(TypeString.DOUBLE.getTypeString(), Double::parseDouble);
    map.put(TypeString.BOOLEAN.getTypeString(), Boolean::parseBoolean);
    map.put(TypeString.STRING.getTypeString(), s -> s);
    map.put(TypeString.BIGDECIMAL.getTypeString(), BigDecimal::new);
    map.put(TypeString.GRADOOPID.getTypeString(), GradoopId::fromString);
    map.put(TypeString.MAP.getTypeString(), MetaDataParser::parseMapProperty);
    map.put(TypeString.LIST.getTypeString(), MetaDataParser::parseListProperty);
    map.put(TypeString.LOCALDATE.getTypeString(), LocalDate::parse);
    map.put(TypeString.LOCALTIME.getTypeString(), LocalTime::parse);
    map.put(TypeString.LOCALDATETIME.getTypeString(), LocalDateTime::parse);
    return Collections.unmodifiableMap(map);
}
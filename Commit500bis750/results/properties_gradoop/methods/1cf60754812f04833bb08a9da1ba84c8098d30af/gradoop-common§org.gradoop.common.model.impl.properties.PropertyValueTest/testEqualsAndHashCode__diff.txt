@Test                                                                                                  @Test                                                                                               
public void testEqualsAndHashCode() throws Exception {                                                 public void testEqualsAndHashCode() throws Exception {                                              
validateEqualsAndHashCode(create(null), create(null), create(false));                                  validateEqualsAndHashCode(create(null), create(null), create(false));                               
validateEqualsAndHashCode(create(true), create(true), create(false));                                  validateEqualsAndHashCode(create(true), create(true), create(false));                               
                                                                                                     | validateEqualsAndHashCode(create((short) 10), create((short) 10), create((short) 11));              
validateEqualsAndHashCode(create(10), create(10), create(11));                                         validateEqualsAndHashCode(create(10), create(10), create(11));                                      
validateEqualsAndHashCode(create(10L), create(10L), create(11L));                                      validateEqualsAndHashCode(create(10L), create(10L), create(11L));                                   
validateEqualsAndHashCode(create(10F), create(10F), create(11F));                                      validateEqualsAndHashCode(create(10F), create(10F), create(11F));                                   
validateEqualsAndHashCode(create(10.), create(10.), create(11.));                                      validateEqualsAndHashCode(create(10.), create(10.), create(11.));                                   
validateEqualsAndHashCode(create("10"), create("10"), create("11"));                                   validateEqualsAndHashCode(create("10"), create("10"), create("11"));                                
validateEqualsAndHashCode(create(new BigDecimal(10)), create(new BigDecimal(10)), create(new BigDeci   validateEqualsAndHashCode(create(new BigDecimal(10)), create(new BigDecimal(10)), create(new BigDeci
validateEqualsAndHashCode(create(GradoopId.fromString("583ff8ffbd7d222690a90999")), create(GradoopId   validateEqualsAndHashCode(create(GradoopId.fromString("583ff8ffbd7d222690a90999")), create(GradoopId
Map&lt;PropertyValue, PropertyValue&gt; map1 = new HashMap&lt;&gt;();                                  Map&lt;PropertyValue, PropertyValue&gt; map1 = new HashMap&lt;&gt;();                               
map1.put(PropertyValue.create("foo"), PropertyValue.create("bar"));                                    map1.put(PropertyValue.create("foo"), PropertyValue.create("bar"));                                 
Map&lt;PropertyValue, PropertyValue&gt; map2 = new HashMap&lt;&gt;();                                  Map&lt;PropertyValue, PropertyValue&gt; map2 = new HashMap&lt;&gt;();                               
map2.put(PropertyValue.create("foo"), PropertyValue.create("bar"));                                    map2.put(PropertyValue.create("foo"), PropertyValue.create("bar"));                                 
Map&lt;PropertyValue, PropertyValue&gt; map3 = new HashMap&lt;&gt;();                                  Map&lt;PropertyValue, PropertyValue&gt; map3 = new HashMap&lt;&gt;();                               
map3.put(PropertyValue.create("foo"), PropertyValue.create("baz"));                                    map3.put(PropertyValue.create("foo"), PropertyValue.create("baz"));                                 
validateEqualsAndHashCode(create(map1), create(map2), create(map3));                                   validateEqualsAndHashCode(create(map1), create(map2), create(map3));                                
List&lt;PropertyValue&gt; list1 = Lists.newArrayList(PropertyValue.create("foo"), PropertyValue.crea   List&lt;PropertyValue&gt; list1 = Lists.newArrayList(PropertyValue.create("foo"), PropertyValue.crea
List&lt;PropertyValue&gt; list2 = Lists.newArrayList(PropertyValue.create("foo"), PropertyValue.crea   List&lt;PropertyValue&gt; list2 = Lists.newArrayList(PropertyValue.create("foo"), PropertyValue.crea
List&lt;PropertyValue&gt; list3 = Lists.newArrayList(PropertyValue.create("foo"), PropertyValue.crea   List&lt;PropertyValue&gt; list3 = Lists.newArrayList(PropertyValue.create("foo"), PropertyValue.crea
validateEqualsAndHashCode(create(list1), create(list2), create(list3));                                validateEqualsAndHashCode(create(list1), create(list2), create(list3));                             
LocalDate date1 = LocalDate.MAX;                                                                       LocalDate date1 = LocalDate.MAX;                                                                    
LocalDate date2 = LocalDate.MAX;                                                                       LocalDate date2 = LocalDate.MAX;                                                                    
LocalDate date3 = LocalDate.now();                                                                     LocalDate date3 = LocalDate.now();                                                                  
validateEqualsAndHashCode(create(date1), create(date2), create(date3));                                validateEqualsAndHashCode(create(date1), create(date2), create(date3));                             
LocalTime time1 = LocalTime.MAX;                                                                       LocalTime time1 = LocalTime.MAX;                                                                    
LocalTime time2 = LocalTime.MAX;                                                                       LocalTime time2 = LocalTime.MAX;                                                                    
LocalTime time3 = LocalTime.now();                                                                     LocalTime time3 = LocalTime.now();                                                                  
validateEqualsAndHashCode(create(time1), create(time2), create(time3));                                validateEqualsAndHashCode(create(time1), create(time2), create(time3));                             
LocalDateTime dateTime1 = LocalDateTime.of(date1, time1);                                              LocalDateTime dateTime1 = LocalDateTime.of(date1, time1);                                           
LocalDateTime dateTime2 = LocalDateTime.of(date2, time2);                                              LocalDateTime dateTime2 = LocalDateTime.of(date2, time2);                                           
LocalDateTime dateTime3 = LocalDateTime.of(date3, time3);                                              LocalDateTime dateTime3 = LocalDateTime.of(date3, time3);                                           
validateEqualsAndHashCode(create(dateTime1), create(dateTime2), create(dateTime3));                    validateEqualsAndHashCode(create(dateTime1), create(dateTime2), create(dateTime3));                 
}                                                                                                      }                                                                                                   

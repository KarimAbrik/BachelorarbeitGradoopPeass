/**
 * Creates a {@link TemporalGraph} instance. By the provided timestamp extractors, it is possible
 * to extract temporal information from the data to define a timestamp or time interval that
 * represents the beginning and end of the element's validity (valid time).
 *
 * The method assumes that the given vertices and edges are already assigned to the given graph head.
 *
 * @param graphHead 1-element graph head DataSet
 * @param graphHeadTimeIntervalExtractor extractor to pick the time interval from graph heads
 * @param vertices vertex DataSet
 * @param vertexTimeIntervalExtractor extractor to pick the time interval from vertices
 * @param edges edge DataSet
 * @param edgeTimeIntervalExtractor extractor to pick the time interval from edges
 * @param <G> The graph head type.
 * @param <V> The vertex type.
 * @param <E> The edge type.
 * @return a temporal graph with temporal data extracted using extractor functions
 */
public <G extends GraphHead, V extends Vertex, E extends Edge> TemporalGraph fromNonTemporalDataSets(DataSet<G> graphHead, TimeIntervalExtractor<G> graphHeadTimeIntervalExtractor, DataSet<V> vertices, TimeIntervalExtractor<V> vertexTimeIntervalExtractor, DataSet<E> edges, TimeIntervalExtractor<E> edgeTimeIntervalExtractor) {
    return new TemporalGraph(this.layoutFactory.fromDataSets(graphHead.map(new GraphHeadToTemporalGraphHead<>(getGraphHeadFactory(), graphHeadTimeIntervalExtractor)), vertices.map(new VertexToTemporalVertex<>(getVertexFactory(), vertexTimeIntervalExtractor)), edges.map(new EdgeToTemporalEdge<>(getEdgeFactory(), edgeTimeIntervalExtractor))), config);
}
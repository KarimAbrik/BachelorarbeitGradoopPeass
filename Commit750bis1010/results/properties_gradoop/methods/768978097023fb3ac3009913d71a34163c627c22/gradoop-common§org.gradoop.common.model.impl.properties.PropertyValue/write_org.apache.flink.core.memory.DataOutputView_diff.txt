/**
 * Byte representation:
 *
 * byte 1       : type info
 *
 * for dynamic length types (e.g. String and BigDecimal)
 * byte 2       : length (short)
 * byte 3       : length (short)
 * byte 4 - end : value bytes
 *
 * If the size of the internal byte representation if larger than
 * {@link #LARGE_PROPERTY_THRESHOLD} (i.e. if a {@code short} is too small to store the length),
 * then the {@link #FLAG_LARGE} bit will be set in the first byte and the byte representation
 * will be:
 * byte 2       ; length (int)
 * byte 3       : length (int)
 * byte 4       : length (int)
 * byte 5       : length (int)
 * byte 6 - end : value bytes
 *
 * for fixed length types (e.g. int, long, float, ...)
 * byte 2 - end : value bytes
 *
 * @param outputView data output to write data to
 * @throws IOException
 */
@Override
public void write(DataOutputView outputView) throws IOException {
    // null?
    // Write type.
    byte type = rawBytes[0];
    if (rawBytes.length > LARGE_PROPERTY_THRESHOLD) {
        type |= FLAG_LARGE;
    }
    outputView.writeByte(type);
    // Write length for types with a variable length.
    if (isString() || isBigDecimal() || isMap() || isList() || isSet()) {
        // Write length as an int if the "large" flag is set.
        if ((type & FLAG_LARGE) == FLAG_LARGE) {
            outputView.writeInt(rawBytes.length - OFFSET);
        } else {
            outputView.writeShort(rawBytes.length - OFFSET);
        }
    }
    // write data
    outputView.write(rawBytes, OFFSET, rawBytes.length - OFFSET);
}
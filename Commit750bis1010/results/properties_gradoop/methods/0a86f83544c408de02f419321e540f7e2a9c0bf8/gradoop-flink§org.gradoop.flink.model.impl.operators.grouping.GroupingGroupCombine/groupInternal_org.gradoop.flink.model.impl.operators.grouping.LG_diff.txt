@Override                                                                                              @Override                                                                                           
protected LG groupInternal(LG graph) {                                                                 protected LG groupInternal(LG graph) {                                                              
                                                                                                     | DataSet&lt;V&gt; vertices = isRetainingVerticesWithoutGroup() ? graph.getVertices().filter(new Label
// map vertex to vertex group item                                                                     // map vertex to vertex group item                                                                  
DataSet&lt;VertexGroupItem&gt; verticesForGrouping = graph.getVertices().flatMap(new BuildVertexGrou | DataSet&lt;VertexGroupItem&gt; verticesForGrouping = vertices.flatMap(new BuildVertexGroupItem&lt;&g
// group vertices by label / properties / both                                                         // group vertices by label / properties / both                                                      
DataSet&lt;VertexGroupItem&gt; combinedVertexGroupItems = groupVertices(verticesForGrouping).// appl   DataSet&lt;VertexGroupItem&gt; combinedVertexGroupItems = groupVertices(verticesForGrouping).// appl
combineGroup(new CombineVertexGroupItems(useVertexLabels()));                                          combineGroup(new CombineVertexGroupItems(useVertexLabels()));                                       
// filter super vertex tuples (1..n per partition/group)                                               // filter super vertex tuples (1..n per partition/group)                                            
// group  super vertex tuples                                                                          // group  super vertex tuples                                                                       
// create super vertex tuple (1 per group) + previous super vertex ids                                 // create super vertex tuple (1 per group) + previous super vertex ids                              
DataSet&lt;Tuple2&lt;VertexGroupItem, IdWithIdSet&gt;&gt; superVertexTuples = groupVertices(combined   DataSet&lt;Tuple2&lt;VertexGroupItem, IdWithIdSet&gt;&gt; superVertexTuples = groupVertices(combined
// build super vertices from super vertex tuples                                                       // build super vertices from super vertex tuples                                                    
DataSet&lt;V&gt; superVertices = superVertexTuples.map(new Value0Of2&lt;&gt;()).map(new BuildSuperVe   DataSet&lt;V&gt; superVertices = superVertexTuples.map(new Value0Of2&lt;&gt;()).map(new BuildSuperVe
// extract mapping                                                                                     // extract mapping                                                                                  
DataSet&lt;IdWithIdSet&gt; mapping = superVertexTuples.map(new Value1Of2&lt;&gt;());                   DataSet&lt;IdWithIdSet&gt; mapping = superVertexTuples.map(new Value1Of2&lt;&gt;());                
// filter non-candidates from combiner output                                                          // filter non-candidates from combiner output                                                       
// update their vertex representative according to the mapping                                         // update their vertex representative according to the mapping                                      
DataSet&lt;VertexWithSuperVertex&gt; vertexToRepresentativeMap = combinedVertexGroupItems.filter(new   DataSet&lt;VertexWithSuperVertex&gt; vertexToRepresentativeMap = combinedVertexGroupItems.filter(new
// build super edges                                                                                 | DataSet&lt;E&gt; edgesToGroup = graph.getEdges();                                                   
DataSet&lt;E&gt; superEdges = buildSuperEdges(graph, vertexToRepresentativeMap);                     | if (isRetainingVerticesWithoutGroup()) {                                                            
                                                                                                     | LG retainedVerticesSubgraph = getSubgraphOfRetainedVertices(graph);                                 
                                                                                                     | // To add support for grouped edges between retained vertices and supervertices,                    
                                                                                                     | // vertices are their group representatives themselves                                              
                                                                                                     | vertexToRepresentativeMap = updateVertexRepresentatives(vertexToRepresentativeMap, retainedVerticesS
                                                                                                     | // don't execute grouping on edges between retained vertices                                        
                                                                                                     | // but execute on edges between retained vertices and grouped vertices                              
                                                                                                     | //   graph.getEdges() - retainedVerticesSubgraph.getEdges()                                         
                                                                                                     | edgesToGroup = subtractEdges(graph.getEdges(), retainedVerticesSubgraph.getEdges());                
                                                                                                     | }                                                                                                   
                                                                                                     | DataSet&lt;E&gt; superEdges = buildSuperEdges(graph.getFactory().getEdgeFactory(), edgesToGroup, ver
                                                                                                     | if (isRetainingVerticesWithoutGroup()) {                                                            
                                                                                                     | LG retainedVerticesSubgraph = getSubgraphOfRetainedVertices(graph);                                 
                                                                                                     | superVertices = superVertices.union(retainedVerticesSubgraph.getVertices());                        
                                                                                                     | superEdges = superEdges.union(retainedVerticesSubgraph.getEdges());                                 
                                                                                                     | }                                                                                                   
return graph.getFactory().fromDataSets(superVertices, superEdges);                                     return graph.getFactory().fromDataSets(superVertices, superEdges);                                  
}                                                                                                      }                                                                                                   

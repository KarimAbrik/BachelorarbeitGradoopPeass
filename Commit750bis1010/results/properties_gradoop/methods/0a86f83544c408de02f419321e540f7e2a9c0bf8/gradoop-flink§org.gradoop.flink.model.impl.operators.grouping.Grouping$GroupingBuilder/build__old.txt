/**
 * Creates a new grouping operator instance based on the configured
 * parameters.
 *
 * @param <G> The graph head type.
 * @param <V> The vertex type.
 * @param <E> The edge type.
 * @param <LG> The type of the graph.
 * @param <GC> The type of the graph collection.
 * @return grouping operator instance
 */
public <G extends GraphHead, V extends Vertex, E extends Edge, LG extends BaseGraph<G, V, E, LG, GC>, GC extends BaseGraphCollection<G, V, E, LG, GC>> UnaryBaseGraphToBaseGraphOperator<LG> build() {
    if (strategy == null) {
        throw new IllegalStateException("A GroupingStrategy has to be set.");
    }
    // adding the global aggregators to the associated label groups
    if (strategy != GroupingStrategy.GROUP_WITH_KEYFUNCTIONS) {
        // global aggregate functions can be handled separately for KeyedGrouping
        for (LabelGroup vertexLabelGroup : vertexLabelGroups) {
            for (AggregateFunction aggregateFunction : globalVertexAggregateFunctions) {
                vertexLabelGroup.addAggregateFunction(aggregateFunction);
            }
        }
        for (LabelGroup edgeLabelGroup : edgeLabelGroups) {
            for (AggregateFunction aggregateFunction : globalEdgeAggregateFunctions) {
                edgeLabelGroup.addAggregateFunction(aggregateFunction);
            }
        }
    }
    UnaryBaseGraphToBaseGraphOperator<LG> groupingOperator;
    switch(strategy) {
        case GROUP_REDUCE:
            groupingOperator = new GroupingGroupReduce<>(useVertexLabel, useEdgeLabel, vertexLabelGroups, edgeLabelGroups);
            break;
        case GROUP_COMBINE:
            groupingOperator = new GroupingGroupCombine<>(useVertexLabel, useEdgeLabel, vertexLabelGroups, edgeLabelGroups);
            break;
        case GROUP_WITH_KEYFUNCTIONS:
            groupingOperator = KeyedGroupingUtils.createInstance(useVertexLabel, useEdgeLabel, vertexLabelGroups, edgeLabelGroups, globalVertexAggregateFunctions, globalEdgeAggregateFunctions);
            break;
        default:
            throw new IllegalArgumentException("Unsupported strategy: " + strategy);
    }
    return groupingOperator;
}
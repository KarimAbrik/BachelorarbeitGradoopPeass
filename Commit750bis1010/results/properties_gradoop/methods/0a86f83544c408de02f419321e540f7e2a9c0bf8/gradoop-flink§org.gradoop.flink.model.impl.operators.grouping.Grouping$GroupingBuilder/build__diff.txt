/**                                                                                                    /**                                                                                                 
* Creates a new grouping operator instance based on the configured                                     * Creates a new grouping operator instance based on the configured                                  
* parameters.                                                                                          * parameters.                                                                                       
*                                                                                                      *                                                                                                   
* @param &lt;G&gt; The graph head type.                                                                * @param &lt;G&gt; The graph head type.                                                             
* @param &lt;V&gt; The vertex type.                                                                    * @param &lt;V&gt; The vertex type.                                                                 
* @param &lt;E&gt; The edge type.                                                                      * @param &lt;E&gt; The edge type.                                                                   
* @param &lt;LG&gt; The type of the graph.                                                             * @param &lt;LG&gt; The type of the graph.                                                          
* @param &lt;GC&gt; The type of the graph collection.                                                  * @param &lt;GC&gt; The type of the graph collection.                                               
* @return grouping operator instance                                                                   * @return grouping operator instance                                                                
*/                                                                                                     */                                                                                                  
public &lt;G extends GraphHead, V extends Vertex, E extends Edge, LG extends BaseGraph&lt;G, V, E, L   public &lt;G extends GraphHead, V extends Vertex, E extends Edge, LG extends BaseGraph&lt;G, V, E, L
if (strategy == null) {                                                                                if (strategy == null) {                                                                             
throw new IllegalStateException("A GroupingStrategy has to be set.");                                  throw new IllegalStateException("A GroupingStrategy has to be set.");                               
}                                                                                                      }                                                                                                   
// adding the global aggregators to the associated label groups                                        // adding the global aggregators to the associated label groups                                     
if (strategy != GroupingStrategy.GROUP_WITH_KEYFUNCTIONS) {                                            if (strategy != GroupingStrategy.GROUP_WITH_KEYFUNCTIONS) {                                         
// global aggregate functions can be handled separately for KeyedGrouping                              // global aggregate functions can be handled separately for KeyedGrouping                           
for (LabelGroup vertexLabelGroup : vertexLabelGroups) {                                                for (LabelGroup vertexLabelGroup : vertexLabelGroups) {                                             
for (AggregateFunction aggregateFunction : globalVertexAggregateFunctions) {                           for (AggregateFunction aggregateFunction : globalVertexAggregateFunctions) {                        
vertexLabelGroup.addAggregateFunction(aggregateFunction);                                              vertexLabelGroup.addAggregateFunction(aggregateFunction);                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
for (LabelGroup edgeLabelGroup : edgeLabelGroups) {                                                    for (LabelGroup edgeLabelGroup : edgeLabelGroups) {                                                 
for (AggregateFunction aggregateFunction : globalEdgeAggregateFunctions) {                             for (AggregateFunction aggregateFunction : globalEdgeAggregateFunctions) {                          
edgeLabelGroup.addAggregateFunction(aggregateFunction);                                                edgeLabelGroup.addAggregateFunction(aggregateFunction);                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
UnaryBaseGraphToBaseGraphOperator&lt;LG&gt; groupingOperator;                                          UnaryBaseGraphToBaseGraphOperator&lt;LG&gt; groupingOperator;                                       
switch(strategy) {                                                                                     switch(strategy) {                                                                                  
case GROUP_REDUCE:                                                                                     case GROUP_REDUCE:                                                                                  
groupingOperator = new GroupingGroupReduce&lt;&gt;(useVertexLabel, useEdgeLabel, vertexLabelGroups,  | groupingOperator = new GroupingGroupReduce&lt;&gt;(useVertexLabel, useEdgeLabel, vertexLabelGroups, 
break;                                                                                                 break;                                                                                              
case GROUP_COMBINE:                                                                                    case GROUP_COMBINE:                                                                                 
groupingOperator = new GroupingGroupCombine&lt;&gt;(useVertexLabel, useEdgeLabel, vertexLabelGroups, | groupingOperator = new GroupingGroupCombine&lt;&gt;(useVertexLabel, useEdgeLabel, vertexLabelGroups,
break;                                                                                                 break;                                                                                              
case GROUP_WITH_KEYFUNCTIONS:                                                                          case GROUP_WITH_KEYFUNCTIONS:                                                                       
                                                                                                     | if (retainVerticesWithoutGroup) {                                                                   
                                                                                                     | throw new UnsupportedOperationException("Retaining vertices without group is not yet supported" + " 
                                                                                                     | }                                                                                                   
groupingOperator = KeyedGroupingUtils.createInstance(useVertexLabel, useEdgeLabel, vertexLabelGroups   groupingOperator = KeyedGroupingUtils.createInstance(useVertexLabel, useEdgeLabel, vertexLabelGroups
break;                                                                                                 break;                                                                                              
default:                                                                                               default:                                                                                            
throw new IllegalArgumentException("Unsupported strategy: " + strategy);                               throw new IllegalArgumentException("Unsupported strategy: " + strategy);                            
}                                                                                                      }                                                                                                   
return groupingOperator;                                                                               return groupingOperator;                                                                            
}                                                                                                      }                                                                                                   

/**
 * Create a graph collection from CSV lines using {@link CSVLineToElement} mapper functions.
 *
 * @param csvToGraphHead    A function mapping a CSV line to a graph head.
 * @param csvToVertex       A function mapping a CSV line to a vertex.
 * @param csvToEdge         A function mapping a CSV line to an edge.
 * @param collectionFactory A factory used to create the final graph collection.
 * @param <G>  The graph head type.
 * @param <V>  The vertex type.
 * @param <E>  The edge type.
 * @param <LG> The graph type.
 * @param <GC> The graph collection type.
 * @return A graph collection representing the graph data stored as CSV.
 */
protected <G extends GraphHead, V extends Vertex, E extends Edge, LG extends BaseGraph<G, V, E, LG, GC>, GC extends BaseGraphCollection<G, V, E, LG, GC>> GC getCollection(CSVLineToElement<G> csvToGraphHead, CSVLineToElement<V> csvToVertex, CSVLineToElement<E> csvToEdge, BaseGraphCollectionFactory<G, V, E, LG, GC> collectionFactory) {
    // Read the meta data
    DataSet<Tuple3<String, String, String>> metaData = new CSVMetaDataSource().readDistributed(getMetaDataPath(), getConfig());
    // Read the datasets of each graph element
    DataSet<G> graphHeads = getConfig().getExecutionEnvironment().readTextFile(getGraphHeadCSVPath()).map(csvToGraphHead).withBroadcastSet(metaData, BC_METADATA);
    DataSet<V> vertices = getConfig().getExecutionEnvironment().readTextFile(getVertexCSVPath()).map(csvToVertex).withBroadcastSet(metaData, BC_METADATA);
    DataSet<E> edges = getConfig().getExecutionEnvironment().readTextFile(getEdgeCSVPath()).map(csvToEdge).withBroadcastSet(metaData, BC_METADATA);
    // Create the graph
    return collectionFactory.fromDataSets(graphHeads, vertices, edges);
}
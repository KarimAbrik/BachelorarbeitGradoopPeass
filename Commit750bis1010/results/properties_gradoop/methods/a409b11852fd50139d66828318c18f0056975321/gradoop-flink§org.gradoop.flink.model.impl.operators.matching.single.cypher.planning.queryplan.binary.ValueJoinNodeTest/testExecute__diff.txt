@Test
public void testExecute() throws Exception {
    GradoopId a = GradoopId.get();
    GradoopId b = GradoopId.get();
    GradoopId c = GradoopId.get();
    GradoopId d = GradoopId.get();
    GradoopId e = GradoopId.get();
    GradoopId f = GradoopId.get();
    GradoopId g = GradoopId.get();
    GradoopId h = GradoopId.get();
    EmbeddingMetaData leftInputMetaData = new EmbeddingMetaData();
    leftInputMetaData.setEntryColumn("v1", EntryType.VERTEX, 0);
    leftInputMetaData.setPropertyColumn("v1", "age", 0);
    Embedding embedding1 = createEmbedding(singletonList(Pair.of(a, singletonList(42))));
    Embedding embedding2 = createEmbedding(singletonList(Pair.of(b, singletonList(21))));
    DataSet<Embedding> leftEmbeddings = getExecutionEnvironment().fromElements(embedding1, embedding2);
    /*
     * ----------------------------------
     * |  v2   | e1    | v3    | v3.age |
     * ----------------------------------
     * | id(c) | id(d) | id(e) |  42    | -> Embedding 3
     * ----------------------------------
     * | id(f) | id(g) | id(h) |  21    | -> Embedding 4
     * ----------------------------------
     */
    EmbeddingMetaData rightInputMetaData = new EmbeddingMetaData();
    rightInputMetaData.setEntryColumn("v2", EntryType.VERTEX, 0);
    rightInputMetaData.setEntryColumn("e1", EntryType.EDGE, 1);
    rightInputMetaData.setEntryColumn("v3", EntryType.VERTEX, 2);
    rightInputMetaData.setPropertyColumn("v3", "age", 0);
    Embedding embedding3 = createEmbedding(asList(Pair.of(c, emptyList()), Pair.of(d, emptyList()), Pair.of(e, singletonList(42))));
    Embedding embedding4 = createEmbedding(asList(Pair.of(f, emptyList()), Pair.of(g, emptyList()), Pair.of(h, singletonList(21))));
    DataSet<Embedding> rightEmbeddings = getExecutionEnvironment().fromElements(embedding3, embedding4);
    MockPlanNode leftChild = new MockPlanNode(leftEmbeddings, leftInputMetaData);
    MockPlanNode rightChild = new MockPlanNode(rightEmbeddings, rightInputMetaData);
    ValueJoinNode node = new ValueJoinNode(leftChild, rightChild, singletonList(Pair.of("v1", "age")), singletonList(Pair.of("v3", "age")), MatchStrategy.ISOMORPHISM, MatchStrategy.ISOMORPHISM);
    List<Embedding> result = node.execute().collect();
    // sort by property value in column 0
    result.sort(Comparator.comparing(o -> o.getProperty(0)));
    assertThat(result.size(), is(2));
    assertEmbedding(result.get(0), asList(b, f, g, h), asList(PropertyValue.create(21), PropertyValue.create(21)));
    assertEmbedding(result.get(1), asList(a, c, d, e), asList(PropertyValue.create(42), PropertyValue.create(42)));
}
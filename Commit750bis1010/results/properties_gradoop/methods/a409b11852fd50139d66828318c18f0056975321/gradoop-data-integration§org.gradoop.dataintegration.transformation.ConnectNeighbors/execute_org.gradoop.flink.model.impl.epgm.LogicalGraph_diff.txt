@Override
public LogicalGraph execute(LogicalGraph graph) {
    // determine the vertices the neighborhood should be calculated for
    DataSet<EPGMVertex> verticesByLabel = graph.getVerticesByLabel(sourceVertexLabel);
    // prepare the graph
    LogicalGraph reducedGraph = graph.vertexInducedSubgraph(new LabelIsIn<>(sourceVertexLabel, neighborhoodVertexLabel));
    // determine the neighborhood by edge direction
    DataSet<Tuple2<EPGMVertex, List<NeighborhoodVertex>>> neighborhood = Neighborhood.getPerVertex(reducedGraph, verticesByLabel, edgeDirection);
    // calculate the new edges and add them to the original graph
    DataSet<EPGMEdge> newEdges = neighborhood.flatMap(new CreateCartesianNeighborhoodEdges<>(graph.getFactory().getEdgeFactory(), newEdgeLabel)).map(new AddToGraphBroadcast<>()).withBroadcastSet(graph.getGraphHead().map(new Id<>()), AddToGraphBroadcast.GRAPH_ID);
    return graph.getFactory().fromDataSets(graph.getGraphHead(), graph.getVertices(), graph.getEdges().union(newEdges));
}
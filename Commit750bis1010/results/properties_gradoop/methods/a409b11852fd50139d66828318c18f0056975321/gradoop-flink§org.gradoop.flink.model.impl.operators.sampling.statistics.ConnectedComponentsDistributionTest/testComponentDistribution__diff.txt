@Test
public void testComponentDistribution() throws Exception {
    // Graph containing 3 WCC with: component - #vertices, #edges:
    // comp1 - 3, 3
    // comp2 - 4, 12
    // comp3 - 2, 1
    String graphString = "g[" + "/* first component */" + "(v0 {id:0, value:\"A\"})" + "(v1 {id:1, value:\"B\"})" + "(v2 {id:2, value:\"C\"})" + "(v0)-[e0]->(v1)" + "(v1)-[e1]->(v2)" + "(v2)-[e2]->(v0)" + "/* second component */" + "(v3 {id:3, value:\"D\"})" + "(v4 {id:4, value:\"E\"})" + "(v5 {id:5, value:\"F\"})" + "(v6 {id:6, value:\"G\"})" + "(v3)-[e4]->(v4)" + "(v3)-[e5]->(v5)" + "(v3)-[e6]->(v6)" + "(v4)-[e7]->(v3)" + "(v4)-[e8]->(v5)" + "(v4)-[e9]->(v6)" + "(v5)-[e10]->(v3)" + "(v5)-[e11]->(v4)" + "(v5)-[e12]->(v6)" + "(v6)-[e13]->(v3)" + "(v6)-[e14]->(v4)" + "(v6)-[e15]->(v5)" + "/* third component */" + "(v7 {id:7, value:\"H\"})" + "(v8 {id:8, value:\"I\"})" + "(v7)-[e3]->(v8)" + "]";
    LogicalGraph graph = getLoaderFromString(graphString).getLogicalGraphByVariable("g");
    DataSet<Tuple3<String, Long, Long>> componentDist = new ConnectedComponentsDistribution(propertyKey, maxIterations, annotateEdges).execute(graph);
    List<Tuple3<String, Long, Long>> componentDistList = Lists.newArrayList();
    componentDist.output(new LocalCollectionOutputFormat<>(componentDistList));
    getExecutionEnvironment().execute();
    assertEquals("Wrong number of components", 3, componentDistList.size());
    List<Long> vertexCount = componentDistList.stream().map(tuple -> tuple.f1).collect(Collectors.toList());
    assertTrue("Wrong number of vertices per component", vertexCount.contains(4L) && vertexCount.contains(3L) && vertexCount.contains(2L));
    if (annotateEdges) {
        for (Tuple3<String, Long, Long> componentTuple : componentDistList) {
            if (componentTuple.f1 == 4L) {
                assertEquals("Wrong number of edges for component '" + componentTuple.f0 + "'", 12L, (long) componentTuple.f2);
            }
            if (componentTuple.f1 == 3L) {
                assertEquals("Wrong number of edges for component '" + componentTuple.f0 + "'", 3L, (long) componentTuple.f2);
            }
            if (componentTuple.f1 == 2L) {
                assertEquals("Wrong number of edges for component '" + componentTuple.f0 + "'", 1L, (long) componentTuple.f2);
            }
        }
    }
}
/**
 * Creates the input datasets, performs the join and validates the expected result.
 *
 * @param distinctVertexColumnsLeft join operator argument
 * @param distinctEdgeColumnsLeft   join operator argument
 * @param expectedEmbedding         expected result
 * @throws Exception on failure
 */
private void testMorphisms(List<Integer> distinctVertexColumnsLeft, List<Integer> distinctVertexColumnsRight, List<Integer> distinctEdgeColumnsLeft, List<Integer> distinctEdgeColumnsRight, List<Embedding> expectedEmbedding) throws Exception {
    List<Embedding> entries = new ArrayList<>();
    entries.add(createEmbedding(vertex0, edge0, vertex1));
    entries.add(createEmbedding(vertex0, edge1, vertex1));
    entries.add(createEmbedding(vertex0, edge2, vertex0));
    entries.add(createEmbedding(vertex0, edge3, vertex0));
    // merge operator
    MergeEmbeddings op = new MergeEmbeddings(3, Arrays.asList(0, 2), distinctVertexColumnsLeft, distinctVertexColumnsRight, distinctEdgeColumnsLeft, distinctEdgeColumnsRight);
    ArrayList<Embedding> resultList = new ArrayList<>();
    // get results
    for (Embedding left : entries) {
        for (Embedding right : entries) {
            if (left.getId(0).equals(right.getId(0)) && left.getId(2).equals(right.getId(2))) {
                ArrayList<Embedding> tmp = new ArrayList<>();
                ListCollector<Embedding> collector = new ListCollector<>(tmp);
                op.join(left, right, collector);
                resultList.addAll(tmp.stream().map(Embedding::copy).collect(Collectors.toList()));
            }
        }
    }
    resultList.sort(new EmbeddingComparator());
    expectedEmbedding.sort(new EmbeddingComparator());
    // test list equality
    assertEquals(expectedEmbedding, resultList);
}
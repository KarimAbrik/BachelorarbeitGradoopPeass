/**
 * Test the function by applying it to some vertices.
 *
 * @throws Exception when the execution in Flink fails.
 */
@Test
public void testFunction() throws Exception {
    CreateVertexFromEdges<EPGMVertex, EPGMEdge> function = new CreateVertexFromEdges<>("test", getConfig().getLogicalGraphFactory().getVertexFactory());
    GradoopId dummy = GradoopId.get();
    EdgeFactory<EPGMEdge> edgeFactory = getConfig().getLogicalGraphFactory().getEdgeFactory();
    // Create some test edges, with some having no properties or label.
    EPGMEdge withoutProperties = edgeFactory.createEdge(dummy, dummy);
    EPGMEdge withProperties = edgeFactory.createEdge("TestEdge2", dummy, dummy);
    withProperties.setProperty("TestProperty", 1L);
    List<EPGMEdge> edges = Arrays.asList(withoutProperties, withProperties);
    List<Tuple3<EPGMVertex, GradoopId, GradoopId>> result = getExecutionEnvironment().fromCollection(edges).map(function).collect();
    // There should be a new vertex for each edge.
    assertEquals(edges.size(), result.size());
    // Every ID should be assigned only once.
    long idCount = result.stream().map(t -> t.f0.getId()).distinct().count();
    assertEquals("EPGMVertex IDs are not unique.", edges.size(), idCount);
    for (Tuple3<EPGMVertex, GradoopId, GradoopId> resultTuple : result) {
        if (resultTuple.f0.getPropertyCount() > 0) {
            assertEquals(withProperties.getProperties(), resultTuple.f0.getProperties());
        }
    }
}
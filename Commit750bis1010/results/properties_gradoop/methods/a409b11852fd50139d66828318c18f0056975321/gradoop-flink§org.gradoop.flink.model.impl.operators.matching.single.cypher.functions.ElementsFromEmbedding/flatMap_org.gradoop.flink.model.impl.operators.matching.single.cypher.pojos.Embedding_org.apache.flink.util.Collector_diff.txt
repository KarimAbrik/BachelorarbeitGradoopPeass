@Override
public void flatMap(Embedding embedding, Collector<Element> out) throws Exception {
    // clear for each embedding
    processedIds.clear();
    // create graph head for this embedding
    G graphHead = graphHeadFactory.createGraphHead();
    // vertices
    for (String vertexVariable : metaData.getVertexVariables()) {
        GradoopId id = embedding.getId(metaData.getEntryColumn(vertexVariable));
        if (labelMapping.containsKey(vertexVariable)) {
            String label = labelMapping.get(vertexVariable);
            initVertexWithData(out, graphHead, id, label);
        } else {
            initVertex(out, graphHead, id);
        }
        variableMapping.put(PropertyValue.create(vertexVariable), PropertyValue.create(id));
    }
    // edges
    GradoopId edgeId;
    GradoopId sourceId;
    GradoopId targetId;
    for (String edgeVariable : metaData.getEdgeVariables()) {
        edgeId = embedding.getId(metaData.getEntryColumn(edgeVariable));
        sourceId = embedding.getId(metaData.getEntryColumn(sourceTargetVariables.get(edgeVariable).getLeft()));
        targetId = embedding.getId(metaData.getEntryColumn(sourceTargetVariables.get(edgeVariable).getRight()));
        if (labelMapping.containsKey(edgeVariable)) {
            String label = labelMapping.get(edgeVariable);
            initEdgeWithData(out, graphHead, edgeId, sourceId, targetId, label);
        } else {
            initEdge(out, graphHead, edgeId, sourceId, targetId);
        }
        variableMapping.put(PropertyValue.create(edgeVariable), PropertyValue.create(edgeId));
    }
    // paths
    for (String pathVariable : metaData.getPathVariables()) {
        ExpandDirection direction = metaData.getDirection(pathVariable);
        List<GradoopId> path = embedding.getIdList(metaData.getEntryColumn(pathVariable));
        List<PropertyValue> mappingValue = new ArrayList<>(path.size());
        for (int i = 0; i < path.size(); i += 2) {
            edgeId = path.get(i);
            mappingValue.add(PropertyValue.create(edgeId));
            if (direction == ExpandDirection.OUT) {
                sourceId = i > 0 ? path.get(i - 1) : embedding.getId(metaData.getEntryColumn(sourceTargetVariables.get(pathVariable).getLeft()));
                targetId = i < path.size() - 1 ? path.get(i + 1) : embedding.getId(metaData.getEntryColumn(sourceTargetVariables.get(pathVariable).getRight()));
                if (i + 2 < path.size()) {
                    mappingValue.add(PropertyValue.create(targetId));
                }
            } else {
                sourceId = i < path.size() - 1 ? path.get(i + 1) : embedding.getId(metaData.getEntryColumn(sourceTargetVariables.get(pathVariable).getLeft()));
                targetId = i > 0 ? path.get(i - 1) : embedding.getId(metaData.getEntryColumn(sourceTargetVariables.get(pathVariable).getRight()));
                if (i > 0) {
                    mappingValue.add(PropertyValue.create(sourceId));
                }
            }
            initVertex(out, graphHead, sourceId);
            initVertex(out, graphHead, targetId);
            initEdge(out, graphHead, edgeId, sourceId, targetId);
        }
        variableMapping.put(PropertyValue.create(pathVariable), PropertyValue.create(mappingValue));
    }
    graphHead.setProperty(PatternMatching.VARIABLE_MAPPING_KEY, variableMapping);
    out.collect(graphHead);
}
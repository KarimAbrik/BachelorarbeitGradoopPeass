@Test
public void filterMultiplePatterns() throws Exception {
    FlinkAsciiGraphLoader loader = getLoaderFromString("input:G {graph: \"inputgraph\"}[" + "(a:A {atype : \"avalue\"})-[beta:BetaEdge {betatype : \"betavalue\"}]->(b:B {btype : " + "\"bvalue\"})  " + "(a2:A {atype : \"avalue\"})-[beta2:BetaEdge {betatype : \"betavalue\"}]->(b2:B {btype : " + "\"bvalue\"})  " + "(dummy:Foo)" + "] " + "pattern1:G {graph:\"pattern 1\"} [(a)-[beta]->(b)]" + "pattern2:G {graph:\"pattern 2\"} [(a2)-[beta2]->(b2)]" + "result:G {graph: \"inputgraph\"} [(:G {graph:\"pattern 1\"}) (:G {graph:\"pattern 2\"}) (dummy)]");
    LogicalGraph searchGraph = loader.getLogicalGraphByVariable("input");
    GraphCollection patternGraphs = loader.getGraphCollectionByVariables("pattern1", "pattern2");
    VertexFusion f = new VertexFusion();
    LogicalGraph output = f.execute(searchGraph, patternGraphs);
    LogicalGraph expected = loader.getLogicalGraphByVariable("result");
    collectAndAssertTrue(output.equalsByData(expected));
    if (deepSearch) {
        collectAndAssertTrue(VertexFusionUtils.myInducedEdgeSubgraphForFusion(searchGraph, expected).equalsByElementIds(VertexFusionUtils.myInducedEdgeSubgraphForFusion(expected, searchGraph)));
    }
}
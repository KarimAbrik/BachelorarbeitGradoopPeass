/**
 * Returns the new value based on all incoming messages. Depending on the
 * number of messages sent to the vertex, the method returns:
 * <p/>
 * 0 messages:   The current value
 * <p/>
 * 1 message:    The minimum of the message and the current vertex value
 * <p/>
 * >1 messages:  The most frequent of all message values
 * <p/>
 * >1 messages, same frequency: The minimum of the most frequent labels
 *
 * @param vertex      the current vertex
 * @param allMessages all received messages
 * @return most frequent value below all messages
 */
private PropertyValue getNewValue(Vertex<GradoopId, PropertyValue> vertex, List<PropertyValue> allMessages) {
    Collections.sort(allMessages);
    PropertyValue newValue;
    int currentCounter = 1;
    PropertyValue currentValue = allMessages.get(0);
    int maxCounter = 1;
    PropertyValue maxValue = PropertyValue.NULL_VALUE;
    for (int i = 1; i < allMessages.size(); i++) {
        if (currentValue == allMessages.get(i)) {
            currentCounter++;
            if (maxCounter < currentCounter) {
                maxCounter = currentCounter;
                maxValue = currentValue;
            }
        } else {
            currentCounter = 1;
            currentValue = allMessages.get(i);
        }
    }
    // if each label has a frequency of one
    if (maxCounter == 1) {
        // to avoid an oscillating state of the calculation we will just use
        // the smaller value
        newValue = getMinimum(vertex.getValue(), allMessages.get(0));
    } else {
        newValue = maxValue;
    }
    return newValue;
}
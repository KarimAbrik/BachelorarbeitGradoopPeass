/**
 * Tests graph head ids get assigned to newly created elements.
 *
 * @throws Exception If collect doesn't work as expected.
 */
@Test
public void containGraphHeadIdTest() throws Exception {
    LogicalGraph socialGraph = getSocialNetworkLoader().getLogicalGraph();
    // this operation should create 6 vertices with the property values:
    // 'Berlin', 3 times 'Dresden', 2 times 'Leipzig'
    ExtractPropertyFromVertex extract = new ExtractPropertyFromVertex("Person", "city", "City", "name", EdgeDirection.ORIGIN_TO_NEWVERTEX, "livesIn");
    LogicalGraph extractedGraph = socialGraph.callForGraph(extract);
    List<EPGMVertex> createdVertices = new ArrayList<>();
    extractedGraph.getVerticesByLabel("City").output(new LocalCollectionOutputFormat<>(createdVertices));
    List<EPGMEdge> createdEdges = new ArrayList<>();
    extractedGraph.getEdgesByLabel("livesIn").output(new LocalCollectionOutputFormat<>(createdEdges));
    // get graph heads
    List<EPGMGraphHead> graphHeads = new ArrayList<>();
    socialGraph.getGraphHead().output(new LocalCollectionOutputFormat<>(graphHeads));
    getConfig().getExecutionEnvironment().execute();
    // check if the id of the original graph is assigned to the newly created elements
    for (EPGMGraphHead graphHead : graphHeads) {
        for (EPGMVertex vertex : createdVertices) {
            Assert.assertTrue(vertex.getGraphIds().contains(graphHead.getId()));
        }
        for (EPGMEdge edge : createdEdges) {
            Assert.assertTrue(edge.getGraphIds().contains(graphHead.getId()));
        }
    }
}
/**
 * Test {@link Neighborhood} with different parameters.
 *
 * @throws Exception when the execution in Flink fails.
 */
@Test
public void testNeighborhood() throws Exception {
    LogicalGraph input = loader.getLogicalGraphByVariable("input");
    EPGMVertex center = loader.getVertexByVariable(centerVertex);
    Collection<EPGMVertex> neighborhoodVertices = loader.getVerticesByGraphVariables(neighborhood);
    DataSet<EPGMVertex> centers = center == null ? getEmptyDataSet(new EPGMVertex()) : getExecutionEnvironment().fromElements(center);
    List<Tuple2<EPGMVertex, List<NeighborhoodVertex>>> neighborhoods = Neighborhood.getPerVertex(input, centers, direction).collect();
    // Make sure we only have 1 center vertex.
    long centerCount = neighborhoods.stream().map(h -> h.f0.getId()).distinct().count();
    assertEquals(center != null ? 1 : 0, centerCount);
    // Get all neighbor ids of that vertex.
    Object[] neighbors = neighborhoods.stream().flatMap(h -> h.f1.stream()).map(NeighborhoodVertex::getNeighborId).sorted().toArray();
    Object[] neighborIdsExpected = neighborhoodVertices.stream().map(EPGMVertex::getId).sorted().toArray();
    assertArrayEquals(neighborIdsExpected, neighbors);
}
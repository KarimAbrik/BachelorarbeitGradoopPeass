/**
 * Test whether edges are inverted correctly.
 *
 * @throws Exception If test data can't be loaded.
 */
@Test
public void testInvert() throws Exception {
    final String toInvertLabel = "hasInterest";
    final String invertedLabel = "foobar";
    LogicalGraph social = getSocialNetworkLoader().getLogicalGraph();
    InvertEdges invertEdges = new InvertEdges(toInvertLabel, invertedLabel);
    LogicalGraph invertedEdgeGraph = social.transformEdges(invertEdges);
    long edgesBefore = social.getEdges().count();
    long edgesToChange = social.getEdges().filter(new ByLabel<>(toInvertLabel)).count();
    long edgesAfter = invertedEdgeGraph.getEdges().count();
    // we have 4 "hasInterest" edges
    Assert.assertEquals(edgesToChange, 4);
    // ensures no new edges are created
    Assert.assertEquals(edgesBefore, edgesAfter);
    long oldEdgeCount = invertedEdgeGraph.getEdges().filter(new ByLabel<>(toInvertLabel)).count();
    // no edges with the old label should exist
    Assert.assertEquals(oldEdgeCount, 0);
    long invertedEdgeCount = invertedEdgeGraph.getEdges().filter(new ByLabel<>(invertedLabel)).count();
    Assert.assertEquals(edgesToChange, invertedEdgeCount);
    /*
     * We now have to check whether all of these hasInterest edges are inverted.
     * (eve)-[:hasInterest]->(databases)
     * (alice)-[:hasInterest]->(databases)
     * (frank)-[:hasInterest]->(hadoop)
     * (dave)-[:hasInterest]->(hadoop)
     */
    List<EPGMVertex> vertices = new ArrayList<>();
    invertedEdgeGraph.getVertices().filter(new Or<>(new ByLabel<>("Person"), new ByLabel<>("Tag"))).output(new LocalCollectionOutputFormat<>(vertices));
    List<EPGMEdge> newEdges = new ArrayList<>();
    invertedEdgeGraph.getEdgesByLabel(invertedLabel).output(new LocalCollectionOutputFormat<>(newEdges));
    getConfig().getExecutionEnvironment().execute();
    Map<GradoopId, String> idMap = new HashMap<>();
    vertices.forEach(v -> idMap.put(v.getId(), v.getPropertyValue("name").getString()));
    Set<String> tags = new HashSet<>(Arrays.asList("Databases", "Hadoop"));
    Set<String> persons = new HashSet<>(Arrays.asList("Eve", "Alice", "Frank", "Dave"));
    for (EPGMEdge e : newEdges) {
        String sourceName = idMap.get(e.getSourceId());
        String targetName = idMap.get(e.getTargetId());
        Assert.assertTrue("source: " + sourceName + " | target: " + targetName, tags.contains(sourceName) && persons.contains(targetName));
        persons.remove(targetName);
    }
}
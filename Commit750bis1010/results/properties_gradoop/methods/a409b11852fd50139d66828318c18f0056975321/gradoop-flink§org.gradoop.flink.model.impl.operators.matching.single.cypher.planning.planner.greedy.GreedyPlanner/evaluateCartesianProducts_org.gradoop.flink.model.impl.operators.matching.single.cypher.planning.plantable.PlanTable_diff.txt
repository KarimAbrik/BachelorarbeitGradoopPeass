//------------------------------------------------------------------------------------------------
// Join and Expand
//------------------------------------------------------------------------------------------------
/**
 * Evaluates which entries in the specified plan table can be joined. The joined entries
 * are added to a new table which is returned.
 *
 * @param currentTable query plan table
 * @return new table containing solely joined plans from the input table
 */
private PlanTable evaluateCartesianProducts(PlanTable currentTable) {
    PlanTable newTable = new PlanTable();
    for (int i = 0; i < currentTable.size(); i++) {
        PlanTableEntry leftEntry = currentTable.get(i);
        for (int j = i + 1; j < currentTable.size(); j++) {
            PlanTableEntry rightEntry = currentTable.get(j);
            CNF joinPredicate = getJoinPredicate(leftEntry, rightEntry);
            if (joinPredicate.size() > 0) {
                newTable.add(createValueJoinEntry(leftEntry, rightEntry, joinPredicate));
            } else {
                // regular join or join with variable length path on source or target vertex
                newTable.add(createCartesianProductEntry(leftEntry, rightEntry));
            }
        }
    }
    return newTable;
}
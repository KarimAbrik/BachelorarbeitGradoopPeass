/**
 * Tests, if the resulting graph contains the same elements as the input graph.
 *
 * @throws Exception on failure
 */
@Test
public void testByElementIds() throws Exception {
    String graph = "input[" + "/* first community */" + "(v0 {id:0, value:\"A\"})" + "(v1 {id:1, value:\"A\"})" + "(v2 {id:2, value:\"B\"})" + "(v0)-[e0]->(v1)" + "(v1)-[e1]->(v2)" + "(v2)-[e2]->(v0)" + "/* second community */" + "(v3 {id:3, value:\"C\"})" + "(v4 {id:4, value:\"D\"})" + "(v5 {id:5, value:\"E\"})" + "(v6 {id:6, value:\"F\"})" + "(v3)-[e3]->(v1)" + "(v3)-[e4]->(v4)" + "(v3)-[e5]->(v5)" + "(v3)-[e6]->(v6)" + "(v4)-[e7]->(v3)" + "(v4)-[e8]->(v5)" + "(v4)-[e9]->(v6)" + "(v5)-[e10]->(v3)" + "(v5)-[e11]->(v4)" + "(v5)-[e12]->(v6)" + "(v6)-[e13]->(v3)" + "(v6)-[e14]->(v4)" + "(v6)-[e15]->(v5)" + "]" + "result[" + "(v0)-[e0]->(v1)" + "(v1)-[e1]->(v2)" + "(v2)-[e2]->(v0)" + "(v3)-[e3]->(v1)" + "(v3)-[e4]->(v4)" + "(v3)-[e5]->(v5)" + "(v3)-[e6]->(v6)" + "(v4)-[e7]->(v3)" + "(v4)-[e8]->(v5)" + "(v4)-[e9]->(v6)" + "(v5)-[e10]->(v3)" + "(v5)-[e11]->(v4)" + "(v5)-[e12]->(v6)" + "(v6)-[e13]->(v3)" + "(v6)-[e14]->(v4)" + "(v6)-[e15]->(v5)" + "]";
    FlinkAsciiGraphLoader loader = getLoaderFromString(graph);
    LogicalGraph outputGraph = loader.getLogicalGraphByVariable("input").callForGraph(new GradoopLabelPropagation(10, "value"));
    collectAndAssertTrue(outputGraph.equalsByElementIds(loader.getLogicalGraphByVariable("result")));
}
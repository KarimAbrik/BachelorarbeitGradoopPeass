/**
 * Test IndexedCSVDataSink to escape strings and labels that contain delimiter characters.
 * Escape characters get inserted before delimiter characters that are part of strings or labels.
 * Whitespace gets replaced by their control character sequence.
 *
 * @throws Exception if the execution or IO fails.
 */
@Test
public void testWriteWithDelimiterCharacters() throws Exception {
    String tmpPath = temporaryFolder.getRoot().getPath();
    ExecutionEnvironment env = getExecutionEnvironment();
    String string1 = "abc;,|:\n=\\ def";
    String string2 = "def;,|:\n=\\ ghi";
    List<PropertyValue> list = Arrays.asList(PropertyValue.create(string2), PropertyValue.create(string1));
    Set<PropertyValue> set = new HashSet<>(list);
    Map<PropertyValue, PropertyValue> map1 = new HashMap<>();
    map1.put(PropertyValue.create(string1), PropertyValue.create(string2));
    map1.put(PropertyValue.create("key"), PropertyValue.create(string1));
    Map<PropertyValue, PropertyValue> map2 = new HashMap<>();
    map2.put(PropertyValue.create(string1), PropertyValue.create(1));
    map2.put(PropertyValue.create("key"), PropertyValue.create(2));
    Map<PropertyValue, PropertyValue> map3 = new HashMap<>();
    map3.put(PropertyValue.create(1), PropertyValue.create(string2));
    map3.put(PropertyValue.create(2), PropertyValue.create(string1));
    Properties props = Properties.create();
    props.set(string1, string2);
    props.set(string2, GradoopTestUtils.BOOL_VAL_1);
    props.set(GradoopTestUtils.KEY_2, string2);
    props.set(GradoopTestUtils.KEY_3, list);
    props.set(GradoopTestUtils.KEY_4, set);
    props.set(GradoopTestUtils.KEY_5, map1);
    props.set(GradoopTestUtils.KEY_5, map2);
    props.set(GradoopTestUtils.KEY_6, map3);
    EPGMGraphHead graphHead = new EPGMGraphHeadFactory().createGraphHead(string1, props);
    DataSet<EPGMGraphHead> graphHeads = env.fromElements(graphHead);
    EPGMVertex vertex = new EPGMVertexFactory().createVertex(string1, props);
    DataSet<EPGMVertex> vertices = env.fromElements(vertex).map(new AddToGraph<>(graphHead)).withForwardedFields("id;label;properties");
    EPGMEdge edge = new EPGMEdgeFactory().createEdge(string1, vertex.getId(), vertex.getId(), props);
    DataSet<EPGMEdge> edges = env.fromElements(edge).map(new AddToGraph<>(graphHead)).withForwardedFields("id;label;properties");
    LogicalGraph graph = getConfig().getLogicalGraphFactory().fromDataSets(graphHeads, vertices, edges);
    checkIndexedCSVWrite(tmpPath, graph);
}
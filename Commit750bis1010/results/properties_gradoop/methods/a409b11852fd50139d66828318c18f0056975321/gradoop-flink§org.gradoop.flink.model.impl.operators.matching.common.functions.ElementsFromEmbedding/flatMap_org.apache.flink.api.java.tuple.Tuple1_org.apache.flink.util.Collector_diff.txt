@Override
public void flatMap(Tuple1<Embedding<GradoopId>> embedding, Collector<Element> out) throws Exception {
    GradoopId[] vertexMapping = embedding.f0.getVertexMapping();
    GradoopId[] edgeMapping = embedding.f0.getEdgeMapping();
    // create graph head for this embedding
    GraphHead graphHead = graphHeadFactory.createGraphHead();
    // collect vertices (and assign to graph head)
    for (int i = 0; i < vertexMapping.length; i++) {
        if (!isProcessed(vertexMapping, i)) {
            Vertex v = vertexFactory.initVertex(vertexMapping[i]);
            v.addGraphId(graphHead.getId());
            out.collect(v);
        }
        reuseVariableMapping.put(PropertyValue.create(queryVertexMapping.get((long) i)), PropertyValue.create(vertexMapping[i]));
    }
    // collect edges (and assign to graph head)
    for (int i = 0; i < edgeMapping.length; i++) {
        if (!isProcessed(edgeMapping, i)) {
            Step s = edgeToStep.get(i);
            // get sourceId/targetId according to traversal step
            GradoopId sourceId = s.isOutgoing() ? vertexMapping[(int) s.getFrom()] : vertexMapping[(int) s.getTo()];
            GradoopId targetId = s.isOutgoing() ? vertexMapping[(int) s.getTo()] : vertexMapping[(int) s.getFrom()];
            Edge e = edgeFactory.initEdge(edgeMapping[i], sourceId, targetId);
            e.addGraphId(graphHead.getId());
            out.collect(e);
        }
        reuseVariableMapping.put(PropertyValue.create(queryEdgeMapping.get((long) i)), PropertyValue.create(edgeMapping[i]));
    }
    graphHead.setProperty(PatternMatching.VARIABLE_MAPPING_KEY, reuseVariableMapping);
    out.collect(graphHead);
}
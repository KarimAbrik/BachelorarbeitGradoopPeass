/**
 * Test the {@link VertexToEdge} transformation where one one edge is added.
 *
 * @throws Exception when the execution in Flink fails.
 */
@Test
public void testWithEdgeCreation() throws Exception {
    FlinkAsciiGraphLoader loader = getLoaderFromString("input:test[" + "(v0:Blue {a : 3})" + "(v1:Green {a : 2})" + "(v2:Blue {a : 4})" + "(v0)-[{b : 2}]->(v1)" + "(v1)-[{b : 4}]->(v2)" + "]" + "expected:test[" + "(v00:Blue {a : 3})" + "(v01:Green {a : 2})" + "(v02:Blue {a : 4})" + "(v00)-[{b : 2}]->(v01)" + "(v01)-[{b : 4}]->(v02)" + "(v00)-[:foo {a : 2, originalVertexLabel: \"Green\"," + "firstEdgeLabel: \"\", secondEdgeLabel: \"\"}]->(v02)" + "]");
    LogicalGraph input = loader.getLogicalGraphByVariable("input");
    LogicalGraph expected = loader.getLogicalGraphByVariable("expected");
    VertexToEdge transformation = new VertexToEdge("Green", "foo");
    LogicalGraph transformed = input.callForGraph(transformation);
    collectAndAssertTrue(transformed.equalsByData(expected));
}
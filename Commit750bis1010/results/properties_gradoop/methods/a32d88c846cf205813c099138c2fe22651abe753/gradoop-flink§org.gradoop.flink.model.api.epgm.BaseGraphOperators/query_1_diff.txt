/**
 * Evaluates the given query using the Cypher query engine. The engine uses default morphism strategies,
 * which is vertex homomorphism and edge isomorphism. The vertex and edge data of the data graph elements
 * is attached to the resulting vertices.
 * <p>
 * In addition, the operator can be supplied with a construction pattern allowing the creation of new graph
 * elements based on variable bindings of the match pattern. Consider the following example:
 * <br>
 * {@code graph.query(
 *  "MATCH (a:Author)-[:WROTE]->(:Paper)<-[:WROTE]-(b:Author) WHERE a <> b",
 *  "(a)-[:CO_AUTHOR]->(b)")}
 * <p>
 * The query pattern is looking for pairs of authors that worked on the same paper.
 * The construction pattern defines a new edge of type CO_AUTHOR between the two entities.
 *
 * @param query               Cypher query
 * @param constructionPattern Construction pattern
 * @param graphStatistics     statistics about the data graph
 * @return graph collection containing the output of the construct pattern
 */
default GC query(String query, String constructionPattern, GraphStatistics graphStatistics) {
    return query(query, constructionPattern, true, MatchStrategy.HOMOMORPHISM, MatchStrategy.ISOMORPHISM, graphStatistics);
}
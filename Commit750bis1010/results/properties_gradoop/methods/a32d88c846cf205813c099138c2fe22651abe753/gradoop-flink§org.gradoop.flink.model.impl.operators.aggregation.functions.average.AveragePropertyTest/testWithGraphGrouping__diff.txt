/**
 * Test the average aggregation on a graph using the graph grouping operator.
 *
 * @throws Exception when the execution in Flink fails.
 */
@Test
public void testWithGraphGrouping() throws Exception {
    FlinkAsciiGraphLoader loader = getLoaderFromString("input[" + "(:A {a: 1L, b: -10.1})(:A {a: 4L, b: -9L})(:B {a: -100.12, b: 12.1})(:B {a: -70.1, b:1L})" + "(:A)(:B)" + "]");
    LogicalGraph result = loader.getLogicalGraphByVariable("input").callForGraph(new Grouping.GroupingBuilder().addVertexGroupingKey(Grouping.LABEL_SYMBOL).addVertexAggregateFunction(new AverageVertexProperty("a")).addVertexAggregateFunction(new AverageVertexProperty("b")).setStrategy(GroupingStrategy.GROUP_COMBINE).build());
    // We have to collect the graph here, since results are doubles which can not be checked using
    // equals.
    List<EPGMVertex> vertices = new ArrayList<>();
    List<EPGMEdge> edges = new ArrayList<>();
    result.getVertices().output(new LocalCollectionOutputFormat<>(vertices));
    result.getEdges().output(new LocalCollectionOutputFormat<>(edges));
    getExecutionEnvironment().execute();
    assertEquals(0, edges.size());
    assertEquals(2, vertices.size());
    for (EPGMVertex vertex : vertices) {
        PropertyValue valueA = vertex.getPropertyValue("avg_a");
        PropertyValue valueB = vertex.getPropertyValue("avg_b");
        assertNotNull("Aggregate property a was not set.", valueA);
        assertNotNull("Aggregate property b was not set.", valueB);
        assertTrue("Aggregate property a is not a double.", valueA.isDouble());
        assertTrue("Aggregate proeprty b is not a double.", valueB.isDouble());
        double aggregateA = valueA.getDouble();
        double aggregateB = valueB.getDouble();
        switch(vertex.getLabel()) {
            case "A":
                assertEquals(2.5d, aggregateA, 0.000001);
                assertEquals(-9.55, aggregateB, 0.000001);
                break;
            case "B":
                assertEquals(-85.11d, aggregateA, 0.000001);
                assertEquals(6.55d, aggregateB, 0.000001);
                break;
            default:
                fail("Unexpected label.");
        }
    }
}
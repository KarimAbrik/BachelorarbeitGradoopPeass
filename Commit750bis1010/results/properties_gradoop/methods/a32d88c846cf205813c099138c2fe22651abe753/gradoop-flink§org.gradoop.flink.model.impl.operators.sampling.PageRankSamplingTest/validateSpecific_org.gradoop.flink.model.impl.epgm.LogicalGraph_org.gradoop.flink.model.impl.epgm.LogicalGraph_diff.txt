@Override
public void validateSpecific(LogicalGraph input, LogicalGraph output) {
    boolean allHaveScore = true;
    boolean noneHasScore = true;
    for (EPGMVertex v : newVertices) {
        if (v.hasProperty(SamplingConstants.SCALED_PAGE_RANK_SCORE_PROPERTY_KEY)) {
            noneHasScore = false;
        } else {
            allHaveScore = false;
        }
    }
    assertTrue("some vertices do and some do not have scaled PageRank-score property", noneHasScore || allHaveScore);
    if (newVertices.isEmpty()) {
        // Result is empty, if input is empty
        // OR all have the same score and keepVerticesIfSameScore = false
        assertTrue("some vertices got sampled (should NOT be)", dbVertices.isEmpty() || !keepVerticesIfSameScore);
    } else if (allHaveScore) {
        // normal case
        for (EPGMVertex v : newVertices) {
            double score = v.getPropertyValue(SamplingConstants.SCALED_PAGE_RANK_SCORE_PROPERTY_KEY).getDouble();
            if (sampleGreaterThanThreshold) {
                assertTrue("sampled vertex has PageRankScore smaller or equal than threshold", score > sampleSize);
            } else {
                assertTrue("sampled vertex has PageRankScore greater than threshold", score <= sampleSize);
            }
        }
    } else if (keepVerticesIfSameScore) {
        // and noneHasScore
        assertEquals("not all vertices got sampled (should be, all got same score)", dbVertices.size(), newVertices.size());
    }
    dbEdges.removeAll(newEdges);
    for (EPGMEdge edge : dbEdges) {
        assertFalse("edge from original graph was not sampled but source and target were", newVertexIDs.contains(edge.getSourceId()) && newVertexIDs.contains(edge.getTargetId()));
    }
}
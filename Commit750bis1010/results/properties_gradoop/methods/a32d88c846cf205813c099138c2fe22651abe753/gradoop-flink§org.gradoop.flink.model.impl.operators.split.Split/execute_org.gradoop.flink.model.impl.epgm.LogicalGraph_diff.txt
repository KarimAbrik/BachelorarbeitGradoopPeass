@Override
public GraphCollection execute(LogicalGraph graph) {
    //--------------------------------------------------------------------------
    // compute vertices
    //--------------------------------------------------------------------------
    // build tuples of vertex and split value, which will determine in which
    // new graph the vertices lie
    DataSet<Tuple2<GradoopId, PropertyValue>> vertexIdWithSplitValues = graph.getVertices().flatMap(new SplitValues<>(function));
    // extract the split properties into a dataset
    DataSet<Tuple1<PropertyValue>> distinctSplitValues = vertexIdWithSplitValues.map(new Project2To1<>()).distinct();
    // generate one new unique GraphId per distinct split property
    DataSet<Tuple2<PropertyValue, GradoopId>> splitValuesWithGraphIds = distinctSplitValues.map(new PairTupleWithNewId<>());
    // build a dataset of the vertex ids and the new associated graph ids
    DataSet<Tuple2<GradoopId, GradoopIdSet>> vertexIdWithGraphIds = vertexIdWithSplitValues.join(splitValuesWithGraphIds).where(1).equalTo(0).with(new JoinVertexIdWithGraphIds()).groupBy(0).reduceGroup(new MultipleGraphIdsGroupReducer());
    // add new graph ids to the initial vertex set
    DataSet<EPGMVertex> vertices = graph.getVertices().join(vertexIdWithGraphIds).where(new Id<>()).equalTo(0).with(new AddNewGraphsToVertex<>());
    //--------------------------------------------------------------------------
    // compute new graphs
    //--------------------------------------------------------------------------
    // extract graph ids into a dataset
    DataSet<Tuple1<GradoopId>> newGraphIds = splitValuesWithGraphIds.map(new Project2To1<>());
    // add new graph id's to the initial graph set
    DataSet<EPGMGraphHead> newGraphs = newGraphIds.map(new InitGraphHead(graph.getFactory().getGraphHeadFactory()));
    //--------------------------------------------------------------------------
    // compute edges
    //--------------------------------------------------------------------------
    // replace source and target id by the graph list the corresponding vertex
    DataSet<Tuple3<EPGMEdge, GradoopIdSet, GradoopIdSet>> edgeGraphIdsGraphIds = graph.getEdges().join(vertexIdWithGraphIds).where(new SourceId<>()).equalTo(0).with(new JoinEdgeTupleWithSourceGraphs<>()).join(vertexIdWithGraphIds).where("f0.targetId").equalTo(0).with(new JoinEdgeTupleWithTargetGraphs<>());
    // add new graph ids to the edges iff source and target are contained in the
    // same graph
    DataSet<EPGMEdge> edges = edgeGraphIdsGraphIds.flatMap(new AddNewGraphsToEdge<>());
    //--------------------------------------------------------------------------
    // return new graph collection
    //--------------------------------------------------------------------------
    return graph.getCollectionFactory().fromDataSets(newGraphs, vertices, edges);
}
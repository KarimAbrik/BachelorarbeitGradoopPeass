@Override
protected LG groupInternal(LG graph) {
    DataSet<V> vertices = isRetainingVerticesWithoutGroup() ? graph.getVertices().filter(new LabelGroupFilter<>(getVertexLabelGroups(), useVertexLabels())) : graph.getVertices();
    // map vertex to vertex group item
    DataSet<VertexGroupItem> verticesForGrouping = vertices.flatMap(new BuildVertexGroupItem<>(useVertexLabels(), getVertexLabelGroups()));
    // group vertices by label / properties / both
    DataSet<VertexGroupItem> vertexGroupItems = groupVertices(verticesForGrouping).// apply aggregate function
    reduceGroup(new ReduceVertexGroupItems(useVertexLabels()));
    DataSet<V> superVertices = vertexGroupItems.// filter group representative tuples
    filter(new FilterSuperVertices()).// build super vertices
    map(new BuildSuperVertex<>(useVertexLabels(), graph.getFactory().getVertexFactory()));
    DataSet<VertexWithSuperVertex> vertexToRepresentativeMap = vertexGroupItems.// filter group element tuples
    filter(new FilterRegularVertices()).// build vertex to group representative tuple
    map(new BuildVertexWithSuperVertex());
    DataSet<E> edgesToGroup = graph.getEdges();
    if (isRetainingVerticesWithoutGroup()) {
        LG retainedVerticesSubgraph = getSubgraphOfRetainedVertices(graph);
        // To add support for grouped edges between retained vertices and supervertices,
        // vertices are their group representatives themselves
        vertexToRepresentativeMap = updateVertexRepresentatives(vertexToRepresentativeMap, retainedVerticesSubgraph.getVertices());
        // don't execute grouping on edges between retained vertices
        // but execute on edges between retained vertices and grouped vertices
        //   graph.getEdges() - retainedVerticesSubgraph.getEdges()
        edgesToGroup = subtractEdges(graph.getEdges(), retainedVerticesSubgraph.getEdges());
    }
    DataSet<E> superEdges = buildSuperEdges(graph.getFactory().getEdgeFactory(), edgesToGroup, vertexToRepresentativeMap);
    if (isRetainingVerticesWithoutGroup()) {
        LG retainedVerticesSubgraph = getSubgraphOfRetainedVertices(graph);
        superVertices = superVertices.union(retainedVerticesSubgraph.getVertices());
        superEdges = superEdges.union(retainedVerticesSubgraph.getEdges());
    }
    return graph.getFactory().fromDataSets(superVertices, superEdges);
}
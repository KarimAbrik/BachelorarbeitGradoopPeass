/**
 * Creates vertex and edge sets for each transaction.
 *
 * @param values vertices and edges associated to the same graph
 * @param out collector
 * @throws Exception The function may throw Exceptions, which will cause the program to cancel,
 *                   and may trigger the recovery logic.
 */
@Override
public void combine(Iterable<Tuple2<GradoopId, EPGMGraphElement>> values, Collector<Tuple3<GradoopId, Set<EPGMVertex>, Set<EPGMEdge>>> out) throws Exception {
    Iterator<Tuple2<GradoopId, EPGMGraphElement>> iterator = values.iterator();
    GradoopId graphId = null;
    Set<EPGMVertex> vertices = new HashSet<>();
    Set<EPGMEdge> edges = new HashSet<>();
    while (iterator.hasNext()) {
        Tuple2<GradoopId, EPGMGraphElement> next = iterator.next();
        graphId = next.f0;
        EPGMGraphElement element = next.f1;
        if (element instanceof EPGMVertex) {
            vertices.add((EPGMVertex) element);
        } else {
            edges.add((EPGMEdge) element);
        }
    }
    out.collect(Tuple3.of(graphId, vertices, edges));
}
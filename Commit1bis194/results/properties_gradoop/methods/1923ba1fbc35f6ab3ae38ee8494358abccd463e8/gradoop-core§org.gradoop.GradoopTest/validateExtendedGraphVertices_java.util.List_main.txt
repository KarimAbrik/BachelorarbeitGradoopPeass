protected void validateExtendedGraphVertices(List<Vertex> result) {
    assertEquals(EXTENDED_GRAPH.length, result.size());
    for (Vertex v : result) {
        System.out.println(v);
        String label = v.getLabel();
        List<Long> graphs = Lists.newArrayList(v.getGraphs());
        List<Edge> outEdges = Lists.newArrayList(v.getOutgoingEdges());
        List<Edge> inEdges = Lists.newArrayList(v.getIncomingEdges());
        Long i = v.getId();
        if (i.equals(0L)) {
            // label (A)
            assertEquals("A", label);
            // properties (3 k1 5 v1 k2 5 v2 k3 5 v3)
            testProperties(v, 3);
            // out edges (a.1.0 1 k1 5 v1)
            assertEquals(1, outEdges.size());
            testEdge(outEdges, 1L, "a", 0L, 1);
            // in edges (b.1.0 1 k1 5 v1)
            assertEquals(1, inEdges.size());
            testEdge(inEdges, 1L, "b", 0L, 2);
            // graphs (1 0)
            assertEquals(1, graphs.size());
            assertTrue(graphs.contains(0L));
        } else if (i.equals(1L)) {
            // labels (B)
            assertEquals("B", label);
            // properties (2 k1 5 v1 k2 5 v2)
            testProperties(v, 2);
            // out edges (b.0.0 2 k1 5 v1 k2 5 v2,c.2.1 0)
            assertEquals(2, outEdges.size());
            testEdge(outEdges, 0L, "b", 0L, 2);
            testEdge(outEdges, 2L, "c", 1L, 0);
            // in edges (a.0.0 1 k1 5 v1)
            assertEquals(1, inEdges.size());
            testEdge(inEdges, 0L, "a", 0L, 1);
            // graphs (2 0 1)
            assertEquals(2, graphs.size());
            assertTrue(graphs.contains(0L));
            assertTrue(graphs.contains(1L));
        } else if (i.equals(2L)) {
            // labels (C)
            assertEquals("C", label);
            // properties (2 k1 5 v1 k2 5 v2)
            testProperties(v, 2);
            // out edges (d.2.0 0)
            assertEquals(1, outEdges.size());
            testEdge(outEdges, 2L, "d", 0L, 0);
            // in edges (d.2.0 0,c.2.1 0)
            assertEquals(2, inEdges.size());
            testEdge(inEdges, 2L, "d", 0L, 0);
            testEdge(inEdges, 1L, "c", 1L, 0);
            // graphs (1 1)
            assertEquals(1, graphs.size());
            assertTrue(graphs.contains(1L));
        } else {
            assertTrue(false);
        }
    }
}
/**                                                                                                    /**                                                                                                 
* Creates vertices and edges                                                                           * Creates vertices and edges                                                                        
*                                                                                                      *                                                                                                   
* @param vertices vertex list                                                                          * @param vertices vertex list                                                                       
* @param line     line of sna input                                                                    * @param line     line of sna input                                                                 
*/                                                                                                     */                                                                                                  
private void readEdges(List&lt;Vertex&gt; vertices, String line) {                                     private void readEdges(List&lt;Vertex&gt; vertices, String line) {                                  
String[] tokens = getTokens(line);                                                                     String[] tokens = getTokens(line);                                                                  
long id0 = Long.parseLong(tokens[0]);                                                                  long id0 = Long.parseLong(tokens[0]);                                                               
long id1 = Long.parseLong(tokens[1]);                                                                  long id1 = Long.parseLong(tokens[1]);                                                               
String edgeLabel = conf.get(LABEL);                                                                    String edgeLabel = conf.get(LABEL);                                                                 
String nodeLabel0 = properties[0].replace(".id", "");                                                  String nodeLabel0 = properties[0].replace(".id", "");                                               
String nodeLabel1 = properties[1].replace(".id", "");                                                  String nodeLabel1 = properties[1].replace(".id", "");                                               
Edge outgoing = EdgeFactory.createDefaultEdgeWithLabel(id1, edgeLabel, random.nextLong());             Edge outgoing = EdgeFactory.createDefaultEdgeWithLabel(id1, edgeLabel, random.nextLong());          
Edge incoming = EdgeFactory.createDefaultEdgeWithLabel(id0, edgeLabel, random.nextLong());             Edge incoming = EdgeFactory.createDefaultEdgeWithLabel(id0, edgeLabel, random.nextLong());          
for (int i = 2; i &lt; properties.length; i++) {                                                       for (int i = 2; i &lt; properties.length; i++) {                                                    
switch(types[i]) {                                                                                     switch(types[i]) {                                                                                  
case "long":                                                                                           case "long":                                                                                        
outgoing.addProperty(properties[i], Long.parseLong(tokens[i]));                                      | outgoing.setProperty(properties[i], Long.parseLong(tokens[i]));                                     
incoming.addProperty(properties[i], Long.parseLong(tokens[i]));                                      | incoming.setProperty(properties[i], Long.parseLong(tokens[i]));                                     
break;                                                                                                 break;                                                                                              
case "string":                                                                                         case "string":                                                                                      
outgoing.addProperty(properties[i], tokens[i]);                                                      | outgoing.setProperty(properties[i], tokens[i]);                                                     
incoming.addProperty(properties[i], tokens[i]);                                                      | incoming.setProperty(properties[i], tokens[i]);                                                     
break;                                                                                                 break;                                                                                              
case "integer":                                                                                        case "integer":                                                                                     
outgoing.addProperty(properties[i], Integer.parseInt(tokens[i]));                                    | outgoing.setProperty(properties[i], Integer.parseInt(tokens[i]));                                   
incoming.addProperty(properties[i], Integer.parseInt(tokens[i]));                                    | incoming.setProperty(properties[i], Integer.parseInt(tokens[i]));                                   
break;                                                                                                 break;                                                                                              
default:                                                                                               default:                                                                                            
outgoing.addProperty(properties[i], tokens[i]);                                                      | outgoing.setProperty(properties[i], tokens[i]);                                                     
incoming.addProperty(properties[i], tokens[i]);                                                      | incoming.setProperty(properties[i], tokens[i]);                                                     
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
List&lt;Edge&gt; outgoingEdgeList = Lists.newArrayListWithExpectedSize(1);                             List&lt;Edge&gt; outgoingEdgeList = Lists.newArrayListWithExpectedSize(1);                          
outgoingEdgeList.add(outgoing);                                                                        outgoingEdgeList.add(outgoing);                                                                     
List&lt;Edge&gt; incomingEdgeList = Lists.newArrayListWithCapacity(1);                                 List&lt;Edge&gt; incomingEdgeList = Lists.newArrayListWithCapacity(1);                              
incomingEdgeList.add(incoming);                                                                        incomingEdgeList.add(incoming);                                                                     
Vertex vex0 = VertexFactory.createDefaultVertex(id0, nodeLabel0, null, outgoingEdgeList, null, null)   Vertex vex0 = VertexFactory.createDefaultVertex(id0, nodeLabel0, null, outgoingEdgeList, null, null)
Vertex vex1 = VertexFactory.createDefaultVertex(id1, nodeLabel1, null, null, incomingEdgeList, null)   Vertex vex1 = VertexFactory.createDefaultVertex(id1, nodeLabel1, null, null, incomingEdgeList, null)
vertices.add(vex0);                                                                                    vertices.add(vex0);                                                                                 
vertices.add(vex1);                                                                                    vertices.add(vex1);                                                                                 
}                                                                                                      }                                                                                                   

/**                                                                                                    /**                                                                                                 
* Runs the HFile conversion from the given file to the output dir. Also                                * Runs the HFile conversion from the given file to the output dir. Also                             
* loads the Hfiles to region servers.                                                                  * loads the Hfiles to region servers.                                                               
*                                                                                                      *                                                                                                   
* @param conf    Cluster config                                                                      | * @param conf      Cluster config                                                                   
* @param outDir  HFile output dir in HDFS                                                            | * @param graphFile graph file in hdfs                                                               
* @param verbose print output during job                                                             | * @param outDir    HFile output dir in HDFS                                                         
                                                                                                     | * @param verbose   print output during job                                                          
* @return true, if the job completed successfully, false otherwise                                     * @return true, if the job completed successfully, false otherwise                                  
* @throws Exception                                                                                    * @throws Exception                                                                                 
*/                                                                                                     */                                                                                                  
private boolean runBulkLoad(Configuration conf, String graphFile, String outDir, boolean verbose) th   private boolean runBulkLoad(Configuration conf, String graphFile, String outDir, boolean verbose) th
Path inputFile = new Path(graphFile);                                                                  Path inputFile = new Path(graphFile);                                                               
Path outputDir = new Path(outDir);                                                                     Path outputDir = new Path(outDir);                                                                  
// set line reader to read lines in input splits                                                       // set line reader to read lines in input splits                                                    
conf.setClass(BulkLoadEPG.VERTEX_LINE_READER, CSVReader.class, VertexLineReader.class);                conf.setClass(BulkLoadEPG.VERTEX_LINE_READER, CSVReader.class, VertexLineReader.class);             
// set vertex handler that creates the Puts                                                            // set vertex handler that creates the Puts                                                         
conf.setClass(BulkLoadEPG.VERTEX_HANDLER, EPGVertexHandler.class, VertexHandler.class);                conf.setClass(BulkLoadEPG.VERTEX_HANDLER, EPGVertexHandler.class, VertexHandler.class);             
Job job = Job.getInstance(conf, JOB_PREFIX + BulkLoadEPG.class.getName());                             Job job = Job.getInstance(conf, JOB_PREFIX + BulkLoadEPG.class.getName());                          
job.setJarByClass(BulkLoadEPG.class);                                                                  job.setJarByClass(BulkLoadEPG.class);                                                               
// mapper that runs the HFile conversion                                                               // mapper that runs the HFile conversion                                                            
job.setMapperClass(BulkLoadEPG.class);                                                                 job.setMapperClass(BulkLoadEPG.class);                                                              
// input format for Mapper (File)                                                                      // input format for Mapper (File)                                                                   
job.setInputFormatClass(TextInputFormat.class);                                                        job.setInputFormatClass(TextInputFormat.class);                                                     
// output Key class of Mapper                                                                          // output Key class of Mapper                                                                       
job.setMapOutputKeyClass(ImmutableBytesWritable.class);                                                job.setMapOutputKeyClass(ImmutableBytesWritable.class);                                             
// output Value class of Mapper                                                                        // output Value class of Mapper                                                                     
job.setMapOutputValueClass(Put.class);                                                                 job.setMapOutputValueClass(Put.class);                                                              
// set input file                                                                                      // set input file                                                                                   
FileInputFormat.addInputPath(job, inputFile);                                                          FileInputFormat.addInputPath(job, inputFile);                                                       
// set output directory                                                                                // set output directory                                                                             
FileOutputFormat.setOutputPath(job, outputDir);                                                        FileOutputFormat.setOutputPath(job, outputDir);                                                     
HTable hTable = new HTable(conf, GConstants.DEFAULT_TABLE_VERTICES);                                   HTable hTable = new HTable(conf, GConstants.DEFAULT_TABLE_VERTICES);                                
// auto configure partitioner and reducer corresponding to the number of                               // auto configure partitioner and reducer corresponding to the number of                            
// regions                                                                                             // regions                                                                                          
HFileOutputFormat2.configureIncrementalLoad(job, hTable);                                              HFileOutputFormat2.configureIncrementalLoad(job, hTable);                                           
// run job                                                                                             // run job                                                                                          
if (!job.waitForCompletion(verbose)) {                                                                 if (!job.waitForCompletion(verbose)) {                                                              
LOG.error("Error during bulk import ... stopping pipeline");                                           LOG.error("Error during bulk import ... stopping pipeline");                                        
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
// load created HFiles to the region servers                                                           // load created HFiles to the region servers                                                        
LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);                                        LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);                                     
loader.doBulkLoad(outputDir, hTable);                                                                  loader.doBulkLoad(outputDir, hTable);                                                               
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   

/**
 * Starting point for SNB analysis pipeline
 *
 * @param args driver arguments
 *             cmd.getOptionValue(LoadConfUtils.OPTION_METADATA_PATH);
 *             String type;
 *             String label;
 * @return Exit code (0 - ok)
 * @throws Exception
 */
@Override
public int run(String[] args) throws Exception {
    int check = parseArgs(args);
    if (check == 0) {
        return 0;
    }
    CommandLine cmd = LoadConfUtils.parseArgs(args);
    if (cmd == null) {
        return 0;
    }
    boolean verbose = cmd.hasOption(OPTION_VERBOSE);
    Configuration conf = getHadoopConf();
    /*
    Step 0: Drop Tables if needed
     */
    if (cmd.hasOption(LoadConfUtils.OPTION_DROP_TABLES)) {
        HBaseGraphStoreFactory.createOrOpenGraphStore(conf, new EPGVertexHandler(), new EPGGraphHandler());
        HBaseGraphStoreFactory.deleteGraphStore(conf);
    }
    // Create or Open GraphStore
    HBaseGraphStoreFactory.createOrOpenGraphStore(conf, new EPGVertexHandler(), new EPGGraphHandler());
    /*
    Step 1: Bulk Load of the graph into HBase using MapReduce
     */
    if (cmd.hasOption(LoadConfUtils.OPTION_BULKLOAD)) {
        String separator = System.getProperty("file.separator");
        String metaDataPath = cmd.getOptionValue(LoadConfUtils.OPTION_METADATA_PATH);
        String type;
        String label;
        String metaData;
        File[] csvFiles = new File(metaDataPath).listFiles();
        assert csvFiles != null;
        for (File file : csvFiles) {
            String fname = file.getName();
            if (fname.contains("_meta")) {
                BufferedReader br = null;
                try {
                    br = new BufferedReader(new InputStreamReader(new FileInputStream(metaDataPath + separator + fname), "UTF8"));
                    String line;
                    type = "";
                    label = "";
                    metaData = "";
                    int lineNr = 1;
                    while ((line = br.readLine()) != null) {
                        if (lineNr == 1) {
                            type = line;
                            lineNr++;
                        } else if (lineNr == 2) {
                            label = line;
                            lineNr++;
                        } else {
                            metaData = line;
                        }
                    }
                    conf.set(CSVReader.TYPE, type);
                    conf.set(CSVReader.LABEL, label);
                    conf.set(CSVReader.META_DATA, metaData);
                    String hdfsInputPath = cmd.getOptionValue(OPTION_GRAPH_INPUT_PATH);
                    String hdfsFileName = fname.replace("_meta", "");
                    String hdfsinputFilePath = hdfsInputPath + hdfsFileName;
                    String outputPathHDFS = cmd.getOptionValue(OPTION_GRAPH_OUTPUT_PATH) + separator + hdfsinputFilePath;
                    LOG.info("Run Bulkload: " + hdfsFileName);
                    if (!runBulkLoad(conf, hdfsinputFilePath, outputPathHDFS, verbose)) {
                        return -1;
                    }
                } catch (IOException e) {
                    System.err.println("IOExcepton: " + e.getMessage());
                } finally {
                    if (br != null) {
                        br.close();
                    }
                }
            }
        }
    }
    /*
    Step 2: LabelPropagation Computation using Giraph
    */
    if (cmd.hasOption(LoadConfUtils.OPTION_LABLEPROPAGATION)) {
        int workers = Integer.parseInt(cmd.getOptionValue(LoadConfUtils.OPTION_WORKERS));
        LOG.info("Run Label-Propagation");
        if (!runLabelPropagationComputation(conf, workers, verbose)) {
            LOG.info("####LP Failure");
            return -1;
        }
    }
    /*
    Step 3: Summarization
     */
    if (cmd.hasOption(LoadConfUtils.OPTION_SUMMARIZE)) {
        String path = cmd.getOptionValue(LoadConfUtils.OPTION_SUMMARIZE_OUTPUT_PATH);
        int reduce = Integer.parseInt(cmd.getOptionValue(LoadConfUtils.OPTION_REDUCERS, "1"));
        int scanCache = Integer.parseInt(cmd.getOptionValue(LoadConfUtils.OPTION_SCAN_CACHE, "500"));
        if (!runSummarize(conf, scanCache, reduce, verbose, path)) {
            LOG.info("####MP Failure");
            return -1;
        }
    }
    return 0;
}
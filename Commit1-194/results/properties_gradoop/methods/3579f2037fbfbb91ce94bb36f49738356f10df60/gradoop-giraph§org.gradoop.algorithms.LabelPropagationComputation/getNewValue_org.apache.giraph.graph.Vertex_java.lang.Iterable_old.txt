/**
 * Returns the current new value. This value is based on all incoming
 * messages. Depending on the number of messages sent to the vertex, the
 * method returns:
 * <p/>
 * 0 messages:   The current value
 * <p/>
 * 1 message:    The minimum of the message and the current vertex value
 * <p/>
 * >1 messages:  The most frequent of all message values
 *
 * @param vertex   The current vertex
 * @param messages All incoming messages
 * @return the new Value the vertex will become
 */
private int getNewValue(Vertex<IntWritable, IntWritable, NullWritable> vertex, Iterable<IntWritable> messages) {
    int newValue;
    // TODO: create allMessages more efficient
    // List<IntWritable> allMessages = Lists.newArrayList(messages);
    List<Integer> allMessages = new ArrayList<>();
    for (IntWritable message : messages) {
        allMessages.add(message.get());
    }
    if (allMessages.isEmpty()) {
        // 1. if no messages are received
        newValue = vertex.getValue().get();
    } else if (allMessages.size() == 1) {
        // 2. if just one message are received
        newValue = Math.min(vertex.getValue().get(), allMessages.get(0));
    } else {
        // 3. if multiple messages are received
        newValue = getMostFrequent(vertex, allMessages);
    }
    return newValue;
}
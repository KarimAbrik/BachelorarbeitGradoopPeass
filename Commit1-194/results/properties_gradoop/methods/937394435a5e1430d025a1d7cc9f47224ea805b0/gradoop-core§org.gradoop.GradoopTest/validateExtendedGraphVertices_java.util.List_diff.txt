protected void validateExtendedGraphVertices(List&lt;Vertex&gt; result) {                              protected void validateExtendedGraphVertices(List&lt;Vertex&gt; result) {                           
assertEquals(EXTENDED_GRAPH.length, result.size());                                                    assertEquals(EXTENDED_GRAPH.length, result.size());                                                 
for (Vertex v : result) {                                                                              for (Vertex v : result) {                                                                           
List&lt;String&gt; labels = Lists.newArrayList(v.getLabels());                                       | System.out.println(v);                                                                              
                                                                                                     | String label = v.getLabel();                                                                        
List&lt;Long&gt; graphs = Lists.newArrayList(v.getGraphs());                                           List&lt;Long&gt; graphs = Lists.newArrayList(v.getGraphs());                                        
List&lt;Edge&gt; outEdges = Lists.newArrayList(v.getOutgoingEdges());                                  List&lt;Edge&gt; outEdges = Lists.newArrayList(v.getOutgoingEdges());                               
List&lt;Edge&gt; inEdges = Lists.newArrayList(v.getIncomingEdges());                                   List&lt;Edge&gt; inEdges = Lists.newArrayList(v.getIncomingEdges());                                
Long i = v.getID();                                                                                    Long i = v.getID();                                                                                 
if (i.equals(0L)) {                                                                                    if (i.equals(0L)) {                                                                                 
// labels (A)                                                                                        | // label (A)                                                                                        
assertEquals(1, labels.size());                                                                      | assertEquals("A", label);                                                                           
assertTrue(labels.contains("A"));                                                                    |                                                                                                     
// properties (3 k1 5 v1 k2 5 v2 k3 5 v3)                                                              // properties (3 k1 5 v1 k2 5 v2 k3 5 v3)                                                           
testProperties(v, 3);                                                                                  testProperties(v, 3);                                                                               
// out edges (a.1.0 1 k1 5 v1)                                                                         // out edges (a.1.0 1 k1 5 v1)                                                                      
assertEquals(1, outEdges.size());                                                                      assertEquals(1, outEdges.size());                                                                   
testEdge(outEdges, 1L, "a", 0L, 1);                                                                    testEdge(outEdges, 1L, "a", 0L, 1);                                                                 
// in edges (b.1.0 1 k1 5 v1)                                                                          // in edges (b.1.0 1 k1 5 v1)                                                                       
assertEquals(1, inEdges.size());                                                                       assertEquals(1, inEdges.size());                                                                    
testEdge(inEdges, 1L, "b", 0L, 2);                                                                     testEdge(inEdges, 1L, "b", 0L, 2);                                                                  
// graphs (1 0)                                                                                        // graphs (1 0)                                                                                     
assertEquals(1, graphs.size());                                                                        assertEquals(1, graphs.size());                                                                     
assertTrue(graphs.contains(0L));                                                                       assertTrue(graphs.contains(0L));                                                                    
} else if (i.equals(1L)) {                                                                             } else if (i.equals(1L)) {                                                                          
// labels (A,B)                                                                                      | // labels (B)                                                                                       
assertEquals(2, labels.size());                                                                      | assertEquals("B", label);                                                                           
assertTrue(labels.contains("A"));                                                                    |                                                                                                     
assertTrue(labels.contains("B"));                                                                    |                                                                                                     
// properties (2 k1 5 v1 k2 5 v2)                                                                      // properties (2 k1 5 v1 k2 5 v2)                                                                   
testProperties(v, 2);                                                                                  testProperties(v, 2);                                                                               
// out edges (b.0.0 2 k1 5 v1 k2 5 v2,c.2.1 0)                                                         // out edges (b.0.0 2 k1 5 v1 k2 5 v2,c.2.1 0)                                                      
assertEquals(2, outEdges.size());                                                                      assertEquals(2, outEdges.size());                                                                   
testEdge(outEdges, 0L, "b", 0L, 2);                                                                    testEdge(outEdges, 0L, "b", 0L, 2);                                                                 
testEdge(outEdges, 2L, "c", 1L, 0);                                                                    testEdge(outEdges, 2L, "c", 1L, 0);                                                                 
// in edges (a.0.0 1 k1 5 v1)                                                                          // in edges (a.0.0 1 k1 5 v1)                                                                       
assertEquals(1, inEdges.size());                                                                       assertEquals(1, inEdges.size());                                                                    
testEdge(inEdges, 0L, "a", 0L, 1);                                                                     testEdge(inEdges, 0L, "a", 0L, 1);                                                                  
// graphs (2 0 1)                                                                                      // graphs (2 0 1)                                                                                   
assertEquals(2, graphs.size());                                                                        assertEquals(2, graphs.size());                                                                     
assertTrue(graphs.contains(0L));                                                                       assertTrue(graphs.contains(0L));                                                                    
assertTrue(graphs.contains(1L));                                                                       assertTrue(graphs.contains(1L));                                                                    
} else if (i.equals(2L)) {                                                                             } else if (i.equals(2L)) {                                                                          
// labels (C)                                                                                          // labels (C)                                                                                       
assertEquals(1, labels.size());                                                                      | assertEquals("C", label);                                                                           
assertTrue(labels.contains("C"));                                                                    |                                                                                                     
// properties (2 k1 5 v1 k2 5 v2)                                                                      // properties (2 k1 5 v1 k2 5 v2)                                                                   
testProperties(v, 2);                                                                                  testProperties(v, 2);                                                                               
// out edges (d.2.0 0)                                                                                 // out edges (d.2.0 0)                                                                              
assertEquals(1, outEdges.size());                                                                      assertEquals(1, outEdges.size());                                                                   
testEdge(outEdges, 2L, "d", 0L, 0);                                                                    testEdge(outEdges, 2L, "d", 0L, 0);                                                                 
// in edges (d.2.0 0,c.2.1 0)                                                                          // in edges (d.2.0 0,c.2.1 0)                                                                       
assertEquals(2, inEdges.size());                                                                       assertEquals(2, inEdges.size());                                                                    
testEdge(inEdges, 2L, "d", 0L, 0);                                                                     testEdge(inEdges, 2L, "d", 0L, 0);                                                                  
testEdge(inEdges, 1L, "c", 1L, 0);                                                                     testEdge(inEdges, 1L, "c", 1L, 0);                                                                  
// graphs (1 1)                                                                                        // graphs (1 1)                                                                                     
assertEquals(1, graphs.size());                                                                        assertEquals(1, graphs.size());                                                                     
assertTrue(graphs.contains(1L));                                                                       assertTrue(graphs.contains(1L));                                                                    
} else {                                                                                               } else {                                                                                            
assertTrue(false);                                                                                     assertTrue(false);                                                                                  
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   

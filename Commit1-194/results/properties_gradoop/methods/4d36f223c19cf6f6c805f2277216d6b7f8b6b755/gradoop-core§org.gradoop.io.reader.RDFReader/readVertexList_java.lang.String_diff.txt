/**
 * {@inheritDoc}
 */
@Override
public List<Vertex> readVertexList(String line) {
    String[] triple = simpleValidate(line);
    if (triple.length == 0) {
        return null;
    }
    String s = triple[0];
    String p = triple[1];
    String o = triple[2];
    List<Vertex> vList = Lists.newArrayListWithCapacity(2);
    Long sourceID = HASH_FUNCTION.newHasher().putString(s, Charsets.UTF_8).hash().asLong();
    Long targetID = HASH_FUNCTION.newHasher().putString(o, Charsets.UTF_8).hash().asLong();
    if (o.startsWith("\"")) {
        // create only one vertex with property
        Vertex vertex = VertexFactory.createDefaultVertexWithLabel(sourceID, s, null);
        switch(getDatatype(o)) {
            case "integer":
                vertex.addProperty(p, Integer.parseInt(getLiteralValue(o)));
                break;
            case "double":
            case "float":
            case "decimal":
                vertex.addProperty(p, Double.parseDouble(getLiteralValue(o)));
                break;
            default:
                vertex.addProperty(p, getLiteralValue(o));
                break;
        }
        vList.add(vertex);
    } else {
        // 2x resource -> 2x vertex
        // outgoing edge on source vertex
        Long edgeOutIndex = HASH_FUNCTION.newHasher().putString(s + p + o, Charsets.UTF_8).hash().asLong();
        Edge edgeOut = EdgeFactory.createDefaultEdgeWithLabel(targetID, p, edgeOutIndex);
        Vertex sourceVertex = VertexFactory.createDefaultVertexWithLabel(sourceID, s, Lists.newArrayList(edgeOut));
        vList.add(sourceVertex);
        // incoming edge on target vertex
        Long edgeInIndex = HASH_FUNCTION.newHasher().putString(o + p + s, Charsets.UTF_8).hash().asLong();
        Edge edgeIn = EdgeFactory.createDefaultEdgeWithLabel(sourceID, p, edgeInIndex);
        Vertex targetVertex = VertexFactory.createDefaultVertexWithEdges(targetID, null, Lists.newArrayList(edgeIn));
        targetVertex.setLabel(o);
        vList.add(targetVertex);
    }
    return vList;
}
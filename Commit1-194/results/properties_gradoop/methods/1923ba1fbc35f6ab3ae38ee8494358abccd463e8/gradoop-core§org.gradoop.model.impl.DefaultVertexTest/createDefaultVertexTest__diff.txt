@Test                                                                                                  @Test                                                                                               
public void createDefaultVertexTest() {                                                                public void createDefaultVertexTest() {                                                             
Long vertexID = 0L;                                                                                    Long vertexID = 0L;                                                                                 
Long otherID1 = 1L;                                                                                    Long otherID1 = 1L;                                                                                 
Long otherID2 = 2L;                                                                                    Long otherID2 = 2L;                                                                                 
Long otherID3 = 3L;                                                                                    Long otherID3 = 3L;                                                                                 
Long otherID4 = 4L;                                                                                    Long otherID4 = 4L;                                                                                 
String label = "A";                                                                                    String label = "A";                                                                                 
Map&lt;String, Object&gt; props = Maps.newHashMapWithExpectedSize(2);                                  Map&lt;String, Object&gt; props = Maps.newHashMapWithExpectedSize(2);                               
props.put("k1", "v1");                                                                                 props.put("k1", "v1");                                                                              
props.put("k2", "v2");                                                                                 props.put("k2", "v2");                                                                              
List&lt;Edge&gt; outgoingEdges = Lists.newArrayListWithCapacity(2);                                    List&lt;Edge&gt; outgoingEdges = Lists.newArrayListWithCapacity(2);                                 
Edge e1 = EdgeFactory.createDefaultEdge(otherID1, otherID1);                                           Edge e1 = EdgeFactory.createDefaultEdge(otherID1, otherID1);                                        
outgoingEdges.add(e1);                                                                                 outgoingEdges.add(e1);                                                                              
Edge e2 = EdgeFactory.createDefaultEdge(otherID2, otherID2);                                           Edge e2 = EdgeFactory.createDefaultEdge(otherID2, otherID2);                                        
outgoingEdges.add(e2);                                                                                 outgoingEdges.add(e2);                                                                              
List&lt;Edge&gt; incomingEdges = Lists.newArrayListWithCapacity(2);                                    List&lt;Edge&gt; incomingEdges = Lists.newArrayListWithCapacity(2);                                 
Edge e3 = EdgeFactory.createDefaultEdge(otherID3, otherID3);                                           Edge e3 = EdgeFactory.createDefaultEdge(otherID3, otherID3);                                        
incomingEdges.add(e3);                                                                                 incomingEdges.add(e3);                                                                              
Edge e4 = EdgeFactory.createDefaultEdge(otherID4, otherID4);                                           Edge e4 = EdgeFactory.createDefaultEdge(otherID4, otherID4);                                        
incomingEdges.add(e4);                                                                                 incomingEdges.add(e4);                                                                              
List&lt;Long&gt; graphs = Lists.newArrayList(0L, 1L);                                                  List&lt;Long&gt; graphs = Lists.newArrayList(0L, 1L);                                               
Vertex v = VertexFactory.createDefaultVertex(vertexID, label, props, outgoingEdges, incomingEdges, g   Vertex v = VertexFactory.createDefaultVertex(vertexID, label, props, outgoingEdges, incomingEdges, g
assertEquals(label, v.getLabel());                                                                     assertEquals(label, v.getLabel());                                                                  
assertThat(v.getPropertyCount(), is(2));                                                               assertThat(v.getPropertyCount(), is(2));                                                            
assertEquals("v1", v.getProperty("k1"));                                                               assertEquals("v1", v.getProperty("k1"));                                                            
assertEquals("v2", v.getProperty("k2"));                                                               assertEquals("v2", v.getProperty("k2"));                                                            
assertThat(v.getID(), is(vertexID));                                                                 | assertThat(v.getId(), is(vertexID));                                                                
List&lt;Edge&gt; e = Lists.newArrayList(v.getOutgoingEdges());                                         List&lt;Edge&gt; e = Lists.newArrayList(v.getOutgoingEdges());                                      
assertThat(e.size(), is(2));                                                                           assertThat(e.size(), is(2));                                                                        
assertTrue(e.contains(e1));                                                                            assertTrue(e.contains(e1));                                                                         
assertTrue(e.contains(e2));                                                                            assertTrue(e.contains(e2));                                                                         
e = Lists.newArrayList(v.getIncomingEdges());                                                          e = Lists.newArrayList(v.getIncomingEdges());                                                       
assertThat(e.size(), is(2));                                                                           assertThat(e.size(), is(2));                                                                        
assertTrue(e.contains(e3));                                                                            assertTrue(e.contains(e3));                                                                         
assertTrue(e.contains(e4));                                                                            assertTrue(e.contains(e4));                                                                         
assertThat(v.getGraphCount(), is(2));                                                                  assertThat(v.getGraphCount(), is(2));                                                               
assertTrue(Lists.newArrayList(v.getGraphs()).contains(0L));                                            assertTrue(Lists.newArrayList(v.getGraphs()).contains(0L));                                         
assertTrue(Lists.newArrayList(v.getGraphs()).contains(1L));                                            assertTrue(Lists.newArrayList(v.getGraphs()).contains(1L));                                         
}                                                                                                      }                                                                                                   

@Test
public void createDefaultVertexTest() {
    Long vertexID = 0L;
    Long otherID1 = 1L;
    Long otherID2 = 2L;
    Long otherID3 = 3L;
    Long otherID4 = 4L;
    String label = "A";
    Map<String, Object> props = Maps.newHashMapWithExpectedSize(2);
    props.put("k1", "v1");
    props.put("k2", "v2");
    List<Edge> outgoingEdges = Lists.newArrayListWithCapacity(2);
    Edge e1 = EdgeFactory.createDefaultEdge(otherID1, otherID1);
    outgoingEdges.add(e1);
    Edge e2 = EdgeFactory.createDefaultEdge(otherID2, otherID2);
    outgoingEdges.add(e2);
    List<Edge> incomingEdges = Lists.newArrayListWithCapacity(2);
    Edge e3 = EdgeFactory.createDefaultEdge(otherID3, otherID3);
    incomingEdges.add(e3);
    Edge e4 = EdgeFactory.createDefaultEdge(otherID4, otherID4);
    incomingEdges.add(e4);
    List<Long> graphs = Lists.newArrayList(0L, 1L);
    Vertex v = VertexFactory.createDefaultVertex(vertexID, label, props, outgoingEdges, incomingEdges, graphs);
    assertEquals(label, v.getLabel());
    assertThat(v.getPropertyCount(), is(2));
    assertEquals("v1", v.getProperty("k1"));
    assertEquals("v2", v.getProperty("k2"));
    assertThat(v.getId(), is(vertexID));
    List<Edge> e = Lists.newArrayList(v.getOutgoingEdges());
    assertThat(e.size(), is(2));
    assertTrue(e.contains(e1));
    assertTrue(e.contains(e2));
    e = Lists.newArrayList(v.getIncomingEdges());
    assertThat(e.size(), is(2));
    assertTrue(e.contains(e3));
    assertTrue(e.contains(e4));
    assertThat(v.getGraphCount(), is(2));
    assertTrue(Lists.newArrayList(v.getGraphs()).contains(0L));
    assertTrue(Lists.newArrayList(v.getGraphs()).contains(1L));
}
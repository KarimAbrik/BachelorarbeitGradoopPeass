/**                                                                                                    /**                                                                                                 
* {@inheritDoc}                                                                                        * {@inheritDoc}                                                                                     
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
public List&lt;Vertex&gt; readVertexList(String line) {                                                public List&lt;Vertex&gt; readVertexList(String line) {                                             
String[] triple = simpleValidate(line);                                                                String[] triple = simpleValidate(line);                                                             
if (triple.length == 0) {                                                                              if (triple.length == 0) {                                                                           
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
String s = triple[0];                                                                                  String s = triple[0];                                                                               
String p = triple[1];                                                                                  String p = triple[1];                                                                               
String o = triple[2];                                                                                  String o = triple[2];                                                                               
List&lt;Vertex&gt; vList = Lists.newArrayListWithCapacity(2);                                          List&lt;Vertex&gt; vList = Lists.newArrayListWithCapacity(2);                                       
Long sourceID = HASH_FUNCTION.newHasher().putString(s, Charsets.UTF_8).hash().asLong();                Long sourceID = HASH_FUNCTION.newHasher().putString(s, Charsets.UTF_8).hash().asLong();             
Long targetID = HASH_FUNCTION.newHasher().putString(o, Charsets.UTF_8).hash().asLong();                Long targetID = HASH_FUNCTION.newHasher().putString(o, Charsets.UTF_8).hash().asLong();             
if (o.startsWith("\"")) {                                                                              if (o.startsWith("\"")) {                                                                           
// create only one vertex with property                                                                // create only one vertex with property                                                             
Vertex vertex = VertexFactory.createDefaultVertexWithLabel(sourceID, s, null);                         Vertex vertex = VertexFactory.createDefaultVertexWithLabel(sourceID, s, null);                      
switch(getDatatype(o)) {                                                                               switch(getDatatype(o)) {                                                                            
case "integer":                                                                                        case "integer":                                                                                     
vertex.addProperty(p, Integer.parseInt(getLiteralValue(o)));                                         | vertex.setProperty(p, Integer.parseInt(getLiteralValue(o)));                                        
break;                                                                                                 break;                                                                                              
case "double":                                                                                         case "double":                                                                                      
case "float":                                                                                          case "float":                                                                                       
case "decimal":                                                                                        case "decimal":                                                                                     
vertex.addProperty(p, Double.parseDouble(getLiteralValue(o)));                                       | vertex.setProperty(p, Double.parseDouble(getLiteralValue(o)));                                      
break;                                                                                                 break;                                                                                              
default:                                                                                               default:                                                                                            
vertex.addProperty(p, getLiteralValue(o));                                                           | vertex.setProperty(p, getLiteralValue(o));                                                          
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
vList.add(vertex);                                                                                     vList.add(vertex);                                                                                  
} else {                                                                                               } else {                                                                                            
// 2x resource -&gt; 2x vertex                                                                         // 2x resource -&gt; 2x vertex                                                                      
// outgoing edge on source vertex                                                                      // outgoing edge on source vertex                                                                   
Long edgeOutIndex = HASH_FUNCTION.newHasher().putString(s + p + o, Charsets.UTF_8).hash().asLong();    Long edgeOutIndex = HASH_FUNCTION.newHasher().putString(s + p + o, Charsets.UTF_8).hash().asLong(); 
Edge edgeOut = EdgeFactory.createDefaultEdgeWithLabel(targetID, p, edgeOutIndex);                      Edge edgeOut = EdgeFactory.createDefaultEdgeWithLabel(targetID, p, edgeOutIndex);                   
Vertex sourceVertex = VertexFactory.createDefaultVertexWithLabel(sourceID, s, Lists.newArrayList(edg   Vertex sourceVertex = VertexFactory.createDefaultVertexWithLabel(sourceID, s, Lists.newArrayList(edg
vList.add(sourceVertex);                                                                               vList.add(sourceVertex);                                                                            
// incoming edge on target vertex                                                                      // incoming edge on target vertex                                                                   
Long edgeInIndex = HASH_FUNCTION.newHasher().putString(o + p + s, Charsets.UTF_8).hash().asLong();     Long edgeInIndex = HASH_FUNCTION.newHasher().putString(o + p + s, Charsets.UTF_8).hash().asLong();  
Edge edgeIn = EdgeFactory.createDefaultEdgeWithLabel(sourceID, p, edgeInIndex);                        Edge edgeIn = EdgeFactory.createDefaultEdgeWithLabel(sourceID, p, edgeInIndex);                     
Vertex targetVertex = VertexFactory.createDefaultVertexWithEdges(targetID, null, Lists.newArrayList(   Vertex targetVertex = VertexFactory.createDefaultVertexWithEdges(targetID, null, Lists.newArrayList(
targetVertex.setLabel(o);                                                                              targetVertex.setLabel(o);                                                                           
vList.add(targetVertex);                                                                               vList.add(targetVertex);                                                                            
}                                                                                                      }                                                                                                   
return vList;                                                                                          return vList;                                                                                       
}                                                                                                      }                                                                                                   

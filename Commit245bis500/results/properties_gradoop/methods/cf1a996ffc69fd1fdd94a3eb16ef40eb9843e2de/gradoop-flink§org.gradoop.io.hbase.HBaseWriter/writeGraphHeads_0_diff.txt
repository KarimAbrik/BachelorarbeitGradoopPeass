/**                                                                                                    /**                                                                                                 
* Converts runtime graph data to persistent graph data (including vertex                               * Converts runtime graph data to persistent graph data (including vertex                            
* and edge identifiers) and writes it to HBase.                                                        * and edge identifiers) and writes it to HBase.                                                     
*                                                                                                      *                                                                                                   
* @param epgmDatabase               EPGM database instance                                             * @param epgmDatabase               EPGM database instance                                          
* @param graphHeadHandler           graph data handler                                                 * @param graphHeadHandler           graph data handler                                              
* @param persistentGraphHeadFactory persistent graph data factory                                      * @param persistentGraphHeadFactory persistent graph data factory                                   
* @param graphDataTableName         HBase graph data table name                                        * @param graphDataTableName         HBase graph data table name                                     
* @param &lt;PGD&gt;                      persistent graph data type                                   * @param &lt;PGD&gt;                      persistent graph data type                                
* @throws IOException                                                                                  * @throws IOException                                                                               
*/                                                                                                     */                                                                                                  
public &lt;PGD extends PersistentGraphHead&gt; void writeGraphHeads(final EPGMDatabase&lt;VD, ED, GD   public &lt;PGD extends PersistentGraphHead&gt; void writeGraphHeads(final EPGMDatabase&lt;VD, ED, GD
final LogicalGraph&lt;VD, ED, GD&gt; graph = epgmDatabase.getDatabaseGraph();                          final LogicalGraph&lt;VD, ED, GD&gt; graph = epgmDatabase.getDatabaseGraph();                       
// build (graph-id, vertex-id) tuples from vertices                                                    // build (graph-id, vertex-id) tuples from vertices                                                 
DataSet&lt;Tuple2&lt;Long, Long&gt;&gt; graphIdToVertexId = graph.getVertices().flatMap(new FlatMapF | DataSet&lt;Tuple2&lt;GradoopId, GradoopId&gt;&gt; graphIdToVertexId = graph.getVertices().flatMap(ne
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
public void flatMap(VD vertex, Collector&lt;Tuple2&lt;Long, Long&gt;&gt; collector) throws Exception | public void flatMap(VD vertex, Collector&lt;Tuple2&lt;GradoopId, GradoopId&gt;&gt; collector) throws
if (vertex.getGraphCount() &gt; 0) {                                                                   if (vertex.getGraphCount() &gt; 0) {                                                                
for (Long graphID : vertex.getGraphs()) {                                                            | for (GradoopId graphID : vertex.getGraphIds()) {                                                    
collector.collect(new Tuple2&lt;&gt;(graphID, vertex.getId()));                                        collector.collect(new Tuple2&lt;&gt;(graphID, vertex.getId()));                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
});                                                                                                    });                                                                                                 
// build (graph-id, edge-id) tuples from vertices                                                      // build (graph-id, edge-id) tuples from vertices                                                   
DataSet&lt;Tuple2&lt;Long, Long&gt;&gt; graphIdToEdgeId = graph.getEdges().flatMap(new FlatMapFuncti | DataSet&lt;Tuple2&lt;GradoopId, GradoopId&gt;&gt; graphIdToEdgeId = graph.getEdges().flatMap(new Fla
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
public void flatMap(ED edge, Collector&lt;Tuple2&lt;Long, Long&gt;&gt; collector) throws Exception { | public void flatMap(ED edge, Collector&lt;Tuple2&lt;GradoopId, GradoopId&gt;&gt; collector) throws E
if (edge.getGraphCount() &gt; 0) {                                                                     if (edge.getGraphCount() &gt; 0) {                                                                  
for (Long graphId : edge.getGraphs()) {                                                              | for (GradoopId graphId : edge.getGraphIds()) {                                                      
collector.collect(new Tuple2&lt;&gt;(graphId, edge.getId()));                                          collector.collect(new Tuple2&lt;&gt;(graphId, edge.getId()));                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
});                                                                                                    });                                                                                                 
// co-group (graph-id, vertex-id) and (graph-id, edge-id) tuples to                                    // co-group (graph-id, vertex-id) and (graph-id, edge-id) tuples to                                 
// (graph-id, {vertex-id}, {edge-id}) triples                                                          // (graph-id, {vertex-id}, {edge-id}) triples                                                       
DataSet&lt;Tuple3&lt;Long, Set&lt;Long&gt;, Set&lt;Long&gt;&gt;&gt; graphToVertexIdsAndEdgeIds = gra | DataSet&lt;Tuple3&lt;GradoopId, GradoopIds, GradoopIds&gt;&gt; graphToVertexIdsAndEdgeIds = graphIdT
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
public void coGroup(Iterable&lt;Tuple2&lt;Long, Long&gt;&gt; graphToVertexIds, Iterable&lt;Tuple2&lt | public void coGroup(Iterable&lt;Tuple2&lt;GradoopId, GradoopId&gt;&gt; graphToVertexIds, Iterable&lt
Set&lt;Long&gt; vertexIds = Sets.newHashSet();                                                       | GradoopIds vertexIds = new GradoopIds();                                                            
Set&lt;Long&gt; edgeIds = Sets.newHashSet();                                                         | GradoopIds edgeIds = new GradoopIds();                                                              
Long graphId = null;                                                                                 | GradoopId graphId = null;                                                                           
boolean initialized = false;                                                                           boolean initialized = false;                                                                        
for (Tuple2&lt;Long, Long&gt; graphToVertexTuple : graphToVertexIds) {                               | for (Tuple2&lt;GradoopId, GradoopId&gt; graphToVertexTuple : graphToVertexIds) {                    
if (!initialized) {                                                                                    if (!initialized) {                                                                                 
graphId = graphToVertexTuple.f0;                                                                       graphId = graphToVertexTuple.f0;                                                                    
initialized = true;                                                                                    initialized = true;                                                                                 
}                                                                                                      }                                                                                                   
vertexIds.add(graphToVertexTuple.f1);                                                                  vertexIds.add(graphToVertexTuple.f1);                                                               
}                                                                                                      }                                                                                                   
for (Tuple2&lt;Long, Long&gt; graphToEdgeTuple : graphToEdgeIds) {                                   | for (Tuple2&lt;GradoopId, GradoopId&gt; graphToEdgeTuple : graphToEdgeIds) {                        
edgeIds.add(graphToEdgeTuple.f1);                                                                      edgeIds.add(graphToEdgeTuple.f1);                                                                   
}                                                                                                      }                                                                                                   
collector.collect(new Tuple3&lt;&gt;(graphId, vertexIds, edgeIds));                                    collector.collect(new Tuple3&lt;&gt;(graphId, vertexIds, edgeIds));                                 
}                                                                                                      }                                                                                                   
});                                                                                                    });                                                                                                 
// join (graph-id, {vertex-id}, {edge-id}) triples with                                                // join (graph-id, {vertex-id}, {edge-id}) triples with                                             
// (graph-id, graph-data) and build (persistent-graph-data)                                            // (graph-id, graph-data) and build (persistent-graph-data)                                         
DataSet&lt;PersistentGraphHead&gt; persistentGraphDataSet = graphToVertexIdsAndEdgeIds.join(epgmData   DataSet&lt;PersistentGraphHead&gt; persistentGraphDataSet = graphToVertexIdsAndEdgeIds.join(epgmData
// write (persistent-graph-data) to HBase table                                                        // write (persistent-graph-data) to HBase table                                                     
Job job = Job.getInstance();                                                                           Job job = Job.getInstance();                                                                        
job.getConfiguration().set(TableOutputFormat.OUTPUT_TABLE, graphDataTableName);                        job.getConfiguration().set(TableOutputFormat.OUTPUT_TABLE, graphDataTableName);                     
persistentGraphDataSet.map(new GraphHeadToHBaseMapper&lt;&gt;(graphHeadHandler)).output(new HadoopOu | persistentGraphDataSet.map(new GraphHeadToHBaseMapper&lt;&gt;(graphHeadHandler)).output(new HadoopOu
}                                                                                                      }                                                                                                   

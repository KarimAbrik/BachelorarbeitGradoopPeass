/**                                                                                                    /**                                                                                                 
* Converts runtime vertex data to persistent vertex data (includes                                     * Converts runtime vertex data to persistent vertex data (includes                                  
* incoming and outgoing edge data) and writes it to HBase.                                             * incoming and outgoing edge data) and writes it to HBase.                                          
*                                                                                                      *                                                                                                   
* @param epgmDatabase                EPGM database instance                                            * @param epgmDatabase                EPGM database instance                                         
* @param vertexHandler           vertex data handler                                                   * @param vertexHandler           vertex data handler                                                
* @param persistentVertexFactory persistent vertex data factory                                        * @param persistentVertexFactory persistent vertex data factory                                     
* @param vertexDataTableName         HBase vertex data table name                                      * @param vertexDataTableName         HBase vertex data table name                                   
* @param &lt;PVD&gt;                       persistent vertex data type                                 * @param &lt;PVD&gt;                       persistent vertex data type                              
* @throws Exception                                                                                    * @throws Exception                                                                                 
*/                                                                                                     */                                                                                                  
public &lt;PVD extends PersistentVertex&lt;ED&gt;&gt; void writeVertices(final EPGMDatabase&lt;VD, E   public &lt;PVD extends PersistentVertex&lt;ED&gt;&gt; void writeVertices(final EPGMDatabase&lt;VD, E
final LogicalGraph&lt;VD, ED, GD&gt; graph = epgmDatabase.getDatabaseGraph();                          final LogicalGraph&lt;VD, ED, GD&gt; graph = epgmDatabase.getDatabaseGraph();                       
// group edges by source vertex id (vertex-id, [out-edge-data])                                        // group edges by source vertex id (vertex-id, [out-edge-data])                                     
DataSet&lt;Tuple2&lt;Long, Set&lt;ED&gt;&gt;&gt; vertexToOutgoingEdges = graph.getEdges().groupBy(ne | DataSet&lt;Tuple2&lt;GradoopId, Set&lt;ED&gt;&gt;&gt; vertexToOutgoingEdges = graph.getEdges().group
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
public void reduce(Iterable&lt;ED&gt; edgeIterable, Collector&lt;Tuple2&lt;Long, Set&lt;ED&gt;&gt;&g | public void reduce(Iterable&lt;ED&gt; edgeIterable, Collector&lt;Tuple2&lt;GradoopId, Set&lt;ED&gt;&
Set&lt;ED&gt; outgoingEdgeData = Sets.newHashSet();                                                    Set&lt;ED&gt; outgoingEdgeData = Sets.newHashSet();                                                 
Long vertexId = null;                                                                                | GradoopId vertexId = null;                                                                          
boolean initialized = false;                                                                           boolean initialized = false;                                                                        
for (ED edge : edgeIterable) {                                                                         for (ED edge : edgeIterable) {                                                                      
if (!initialized) {                                                                                    if (!initialized) {                                                                                 
vertexId = edge.getSourceVertexId();                                                                   vertexId = edge.getSourceVertexId();                                                                
initialized = true;                                                                                    initialized = true;                                                                                 
}                                                                                                      }                                                                                                   
outgoingEdgeData.add(edge);                                                                            outgoingEdgeData.add(edge);                                                                         
}                                                                                                      }                                                                                                   
collector.collect(new Tuple2&lt;&gt;(vertexId, outgoingEdgeData));                                     collector.collect(new Tuple2&lt;&gt;(vertexId, outgoingEdgeData));                                  
}                                                                                                      }                                                                                                   
});                                                                                                    });                                                                                                 
// group edges by target vertex id (vertex-id, [in-edge-data])                                         // group edges by target vertex id (vertex-id, [in-edge-data])                                      
DataSet&lt;Tuple2&lt;Long, Set&lt;ED&gt;&gt;&gt; vertexToIncomingEdges = graph.getEdges().groupBy(ne | DataSet&lt;Tuple2&lt;GradoopId, Set&lt;ED&gt;&gt;&gt; vertexToIncomingEdges = graph.getEdges().group
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
public void reduce(Iterable&lt;ED&gt; edgeIterable, Collector&lt;Tuple2&lt;Long, Set&lt;ED&gt;&gt;&g | public void reduce(Iterable&lt;ED&gt; edgeIterable, Collector&lt;Tuple2&lt;GradoopId, Set&lt;ED&gt;&
Set&lt;ED&gt; outgoingEdgeData = Sets.newHashSet();                                                    Set&lt;ED&gt; outgoingEdgeData = Sets.newHashSet();                                                 
Long vertexId = null;                                                                                | GradoopId vertexId = null;                                                                          
boolean initialized = false;                                                                           boolean initialized = false;                                                                        
for (ED edge : edgeIterable) {                                                                         for (ED edge : edgeIterable) {                                                                      
if (!initialized) {                                                                                    if (!initialized) {                                                                                 
vertexId = edge.getTargetVertexId();                                                                   vertexId = edge.getTargetVertexId();                                                                
initialized = true;                                                                                    initialized = true;                                                                                 
}                                                                                                      }                                                                                                   
outgoingEdgeData.add(edge);                                                                            outgoingEdgeData.add(edge);                                                                         
}                                                                                                      }                                                                                                   
collector.collect(new Tuple2&lt;&gt;(vertexId, outgoingEdgeData));                                     collector.collect(new Tuple2&lt;&gt;(vertexId, outgoingEdgeData));                                  
}                                                                                                      }                                                                                                   
});                                                                                                    });                                                                                                 
// co-group (vertex-data) with (vertex-id, [out-edge-data]) to simulate left                           // co-group (vertex-data) with (vertex-id, [out-edge-data]) to simulate left                        
// outer join                                                                                          // outer join                                                                                       
DataSet&lt;Tuple2&lt;VD, Set&lt;ED&gt;&gt;&gt; vertexDataWithOutgoingEdges = graph.getVertices().coG | DataSet&lt;Tuple2&lt;VD, Set&lt;ED&gt;&gt;&gt; vertexDataWithOutgoingEdges = graph.getVertices().coG
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
public void coGroup(Iterable&lt;VD&gt; vertexIterable, Iterable&lt;Tuple2&lt;Long, Set&lt;ED&gt;&gt; | public void coGroup(Iterable&lt;VD&gt; vertexIterable, Iterable&lt;Tuple2&lt;GradoopId, Set&lt;ED&gt
VD vertex = null;                                                                                      VD vertex = null;                                                                                   
Set&lt;ED&gt; outgoingEdgeData = null;                                                                 Set&lt;ED&gt; outgoingEdgeData = null;                                                              
// read vertex data from left group                                                                    // read vertex data from left group                                                                 
for (VD v : vertexIterable) {                                                                          for (VD v : vertexIterable) {                                                                       
vertex = v;                                                                                            vertex = v;                                                                                         
}                                                                                                      }                                                                                                   
// read outgoing edge from right group (may be empty)                                                  // read outgoing edge from right group (may be empty)                                               
for (Tuple2&lt;Long, Set&lt;ED&gt;&gt; oEdges : outEdgesIterable) {                                  | for (Tuple2&lt;GradoopId, Set&lt;ED&gt;&gt; oEdges : outEdgesIterable) {                            
outgoingEdgeData = oEdges.f1;                                                                          outgoingEdgeData = oEdges.f1;                                                                       
}                                                                                                      }                                                                                                   
collector.collect(new Tuple2&lt;&gt;(vertex, outgoingEdgeData));                                       collector.collect(new Tuple2&lt;&gt;(vertex, outgoingEdgeData));                                    
}                                                                                                      }                                                                                                   
});                                                                                                    });                                                                                                 
// co-group (vertex-data, (vertex-id, [out-edge-data])) with (vertex-id,                               // co-group (vertex-data, (vertex-id, [out-edge-data])) with (vertex-id,                            
// [in-edge-data]) to simulate left outer join                                                         // [in-edge-data]) to simulate left outer join                                                      
DataSet&lt;PersistentVertex&lt;ED&gt;&gt; persistentVertexDataSet = vertexDataWithOutgoingEdges.coGr | DataSet&lt;PersistentVertex&lt;ED&gt;&gt; persistentVertexDataSet = vertexDataWithOutgoingEdges.coGr
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
public Long getKey(Tuple2&lt;VD, Set&lt;ED&gt;&gt; vdSetTuple2) throws Exception {                   | public GradoopId getKey(Tuple2&lt;VD, Set&lt;ED&gt;&gt; vdSetTuple2) throws Exception {             
return vdSetTuple2.f0.getId();                                                                         return vdSetTuple2.f0.getId();                                                                      
}                                                                                                      }                                                                                                   
}).equalTo(0).with(new PersistentVertexCoGroupFunction&lt;&gt;(persistentVertexFactory));              }).equalTo(0).with(new PersistentVertexCoGroupFunction&lt;&gt;(persistentVertexFactory));           
// write (persistent-vertex-data) to HBase table                                                       // write (persistent-vertex-data) to HBase table                                                    
Job job = Job.getInstance();                                                                           Job job = Job.getInstance();                                                                        
job.getConfiguration().set(TableOutputFormat.OUTPUT_TABLE, vertexDataTableName);                       job.getConfiguration().set(TableOutputFormat.OUTPUT_TABLE, vertexDataTableName);                    
persistentVertexDataSet.map(new VertexToHBaseMapper&lt;&gt;(vertexHandler)).output(new HadoopOutputF | persistentVertexDataSet.map(new VertexToHBaseMapper&lt;&gt;(vertexHandler)).output(new HadoopOutputF
}                                                                                                      }                                                                                                   

/**
 * Writes the EPGM database instance to HBase using the given arguments.
 * <p/>
 * HBase tables must be created before calling this method.
 *
 * @param epgmStore                   EPGM store to handle HBase
 * @param persistentVertexFactory persistent vertex data factory
 * @param persistentEdgeFactory   persistent edge data factory
 * @param persistentGraphHeadFactory  persistent graph data factory
 * @param <PVD>                       persistent vertex data type
 * @param <PED>                       persistent edge data type
 * @param <PGD>                       persistent graph data type
 * @throws Exception
 */
public <PVD extends PersistentVertex<ED>, PED extends PersistentEdge<VD>, PGD extends PersistentGraphHead> void writeToHBase(EPGMStore<VD, ED, GD> epgmStore, final PersistentVertexFactory<VD, ED, PVD> persistentVertexFactory, final PersistentEdgeFactory<ED, VD, PED> persistentEdgeFactory, final PersistentGraphHeadFactory<GD, PGD> persistentGraphHeadFactory) throws Exception {
    HBaseWriter<VD, ED, GD> hBaseWriter = new HBaseWriter<>();
    GradoopConfig<VD, ED, GD> conf = epgmStore.getConfig();
    // transform graph data to persistent graph data and write it
    hBaseWriter.writeGraphHeads(this, conf.getGraphHeadHandler(), persistentGraphHeadFactory, epgmStore.getGraphHeadName());
    this.config.getExecutionEnvironment().execute();
    // transform vertex data to persistent vertex data and write it
    hBaseWriter.writeVertices(this, conf.getVertexHandler(), persistentVertexFactory, epgmStore.getVertexTableName());
    this.config.getExecutionEnvironment().execute();
    // transform edge data to persistent edge data and write it
    hBaseWriter.writeEdges(this, conf.getEdgeHandler(), persistentEdgeFactory, epgmStore.getEdgeTableName());
    this.config.getExecutionEnvironment().execute();
}
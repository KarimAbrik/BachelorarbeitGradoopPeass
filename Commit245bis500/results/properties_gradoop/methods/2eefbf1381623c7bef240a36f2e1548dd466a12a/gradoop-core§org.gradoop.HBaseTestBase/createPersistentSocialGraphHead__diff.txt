public static Collection<PersistentGraphHead> createPersistentSocialGraphHead() {
    Collection<GraphHeadPojo> graphDataCollection = createGraphHeadCollection();
    List<PersistentGraphHead> persistentGraphData = Lists.newArrayListWithExpectedSize(graphDataCollection.size());
    PersistentGraphHeadFactory<GraphHeadPojo, HBaseGraphHead> graphDataFactory = new HBaseGraphHeadFactory();
    GradoopIds vertexIds = null;
    GradoopIds edgeIds = null;
    for (GraphHeadPojo graphData : graphDataCollection) {
        if (graphData.getId().equals(communityDatabases.getId())) {
            vertexIds = GradoopIds.fromExisting(VERTEX_PERSON_ALICE.getId(), VERTEX_PERSON_BOB.getId(), VERTEX_PERSON_EVE.getId());
            edgeIds = GradoopIds.fromExisting(EDGE_0_KNOWS.getId(), EDGE_1_KNOWS.getId(), EDGE_6_KNOWS.getId(), EDGE_21_KNOWS.getId());
        } else if (graphData.getId().equals(communityHadoop.getId())) {
            vertexIds = GradoopIds.fromExisting(VERTEX_PERSON_CAROL.getId(), VERTEX_PERSON_DAVE.getId(), VERTEX_PERSON_FRANK.getId());
            edgeIds = GradoopIds.fromExisting(EDGE_4_KNOWS.getId(), EDGE_5_KNOWS.getId(), EDGE_22_KNOWS.getId(), EDGE_23_KNOWS.getId());
        } else if (graphData.getId().equals(communityGraphs.getId())) {
            vertexIds = GradoopIds.fromExisting(VERTEX_PERSON_ALICE.getId(), VERTEX_PERSON_BOB.getId(), VERTEX_PERSON_CAROL.getId(), VERTEX_PERSON_DAVE.getId());
            edgeIds = GradoopIds.fromExisting(EDGE_0_KNOWS.getId(), EDGE_1_KNOWS.getId(), EDGE_2_KNOWS.getId(), EDGE_3_KNOWS.getId(), EDGE_4_KNOWS.getId(), EDGE_5_KNOWS.getId());
        } else if (graphData.getId().equals(forumGraph.getId())) {
            vertexIds = GradoopIds.fromExisting(VERTEX_PERSON_CAROL.getId(), VERTEX_PERSON_DAVE.getId(), VERTEX_PERSON_FRANK.getId(), VERTEX_FORUM_GPS.getId());
            edgeIds = GradoopIds.fromExisting(EDGE_4_KNOWS.getId(), EDGE_16_HAS_MODERATOR.getId(), EDGE_19_HAS_MEMBER.getId(), EDGE_20_HAS_MEMBER.getId());
        }
        persistentGraphData.add(graphDataFactory.createGraphHead(graphData, vertexIds, edgeIds));
    }
    return persistentGraphData;
}
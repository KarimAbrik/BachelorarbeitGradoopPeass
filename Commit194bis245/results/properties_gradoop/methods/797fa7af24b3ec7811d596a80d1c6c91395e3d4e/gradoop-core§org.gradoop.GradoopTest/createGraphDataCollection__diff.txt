protected Collection<DefaultGraphData> createGraphDataCollection() {
    // graphs
    DefaultGraphDataFactory graphDataFactory = new DefaultGraphDataFactory();
    List<DefaultGraphData> graphs = Lists.newArrayList();
    // Community {interest: Databases, vertexCount: 3} (0L)
    Map<String, Object> properties = new HashMap<>();
    properties.put(PROPERTY_KEY_INTEREST, "Databases");
    properties.put(PROPERTY_KEY_VERTEX_COUNT, 3);
    communityDatabases = graphDataFactory.createGraphData(0L, LABEL_COMMUNITY, properties);
    graphs.add(communityDatabases);
    // Community {interest: Hadoop, vertexCount: 3} (1L)
    properties = new HashMap<>();
    properties.put(PROPERTY_KEY_INTEREST, "Hadoop");
    properties.put(PROPERTY_KEY_VERTEX_COUNT, 3);
    communityHadoop = graphDataFactory.createGraphData(1L, LABEL_COMMUNITY, properties);
    graphs.add(communityHadoop);
    // Community {interest: Graphs, vertexCount: 4} (2L)
    properties = new HashMap<>();
    properties.put(PROPERTY_KEY_INTEREST, "Graphs");
    properties.put(PROPERTY_KEY_VERTEX_COUNT, 4);
    communityGraphs = graphDataFactory.createGraphData(2L, LABEL_COMMUNITY, properties);
    graphs.add(communityGraphs);
    // Forum {} (3L)
    forumGraph = graphDataFactory.createGraphData(3L, LABEL_FORUM);
    graphs.add(forumGraph);
    return graphs;
}
/**
 * {@inheritDoc}
 */
@Override
public GraphCollection<VD, ED, GD> execute(LogicalGraph<VD, ED, GD> epGraph) throws Exception {
    DataSet<Vertex<Long, LabelPropagationValue>> vertices = epGraph.getVertices().map(new MapFunction<Vertex<Long, VD>, Vertex<Long, LabelPropagationValue>>() {

        @Override
        public Vertex<Long, LabelPropagationValue> map(Vertex<Long, VD> vertex) throws Exception {
            return new Vertex<>(vertex.getId(), new LabelPropagationValue(vertex.getId(), vertex.getId()));
        }
    });
    DataSet<Edge<Long, NullValue>> edges = epGraph.getEdges().map(new MapFunction<Edge<Long, ED>, Edge<Long, NullValue>>() {

        @Override
        public Edge<Long, NullValue> map(Edge<Long, ED> edge) throws Exception {
            return new Edge<>(edge.getSource(), edge.getTarget(), NullValue.getInstance());
        }
    });
    Graph<Long, LabelPropagationValue, NullValue> graph = Graph.fromDataSet(vertices, edges, env);
    graph = graph.run(new LabelPropagationAlgorithm(this.maxIterations));
    DataSet<Vertex<Long, VD>> labeledVertices = graph.getVertices().join(epGraph.getVertices()).where(new LPKeySelector()).equalTo(new KeySelectors.VertexKeySelector<VD>()).with(new LPJoin<VD>());
    LogicalGraph<VD, ED, GD> labeledGraph = LogicalGraph.fromDataSets(labeledVertices, epGraph.getEdges(), null, epGraph.getVertexDataFactory(), epGraph.getEdgeDataFactory(), epGraph.getGraphDataFactory());
    LongFromProperty<VD> lfp = new LongFromProperty<>(propertyKey);
    SplitBy<VD, ED, GD> callByPropertyKey = new SplitBy<>(lfp, env);
    return callByPropertyKey.execute(labeledGraph);
}
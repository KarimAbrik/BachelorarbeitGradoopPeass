@Override
public EPGraph getGraph(final Long graphID) throws Exception {
    // filter vertices and edges based on given graph id
    Graph<Long, VertexData, EdgeData> subGraph = this.graph.subgraph(new VertexGraphContainmentFilter(graphID), new EdgeGraphContainmentFilter(graphID));
    DataSet<Tuple1<Long>> graphIDDataSet = env.fromCollection(Lists.newArrayList(new Tuple1<>(graphID)));
    // get graph data based on graph id
    GraphData graphData = this.subgraphs.joinWithTiny(graphIDDataSet).where(GRAPH_ID).equalTo(0).with(new JoinFunction<Subgraph<Long, GraphData>, Tuple1<Long>, GraphData>() {

        @Override
        public GraphData join(Subgraph<Long, GraphData> g, Tuple1<Long> gID) throws Exception {
            return g.getValue();
        }
    }).first(1).collect().get(0);
    return EPGraph.fromGraph(subGraph, graphData);
}
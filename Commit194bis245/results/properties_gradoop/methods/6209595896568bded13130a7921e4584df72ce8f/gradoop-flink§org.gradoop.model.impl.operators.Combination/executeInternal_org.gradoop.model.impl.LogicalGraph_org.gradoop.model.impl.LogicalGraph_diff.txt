/**
 * {@inheritDoc}
 */
@Override
protected LogicalGraph<VD, ED, GD> executeInternal(LogicalGraph<VD, ED, GD> firstGraph, LogicalGraph<VD, ED, GD> secondGraph) {
    final Long newGraphID = FlinkConstants.COMBINE_GRAPH_ID;
    // build distinct union of vertex sets and update graph ids at vertices
    // cannot use Gelly union here because of missing argument for KeySelector
    DataSet<Vertex<Long, VD>> newVertexSet = firstGraph.getVertices().union(secondGraph.getVertices()).distinct(new KeySelectors.VertexKeySelector<VD>()).map(new VertexToGraphUpdater<VD>(newGraphID));
    DataSet<Edge<Long, ED>> newEdgeSet = firstGraph.getEdges().union(secondGraph.getEdges()).distinct(new KeySelectors.EdgeKeySelector<ED>()).map(new EdgeToGraphUpdater<ED>(newGraphID));
    return LogicalGraph.fromGellyGraph(Graph.fromDataSet(newVertexSet, newEdgeSet, newVertexSet.getExecutionEnvironment()), firstGraph.getGraphDataFactory().createGraphData(newGraphID), firstGraph.getVertexDataFactory(), firstGraph.getEdgeDataFactory(), firstGraph.getGraphDataFactory());
}
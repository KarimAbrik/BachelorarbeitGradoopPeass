@Override                                                                                              @Override                                                                                           
public EPGraph getGraph(final Long graphID) throws Exception {                                       | public EPGraph&lt;VD, ED, GD&gt; getGraph(final Long graphID) throws Exception {                    
// filter vertices and edges based on given graph id                                                   // filter vertices and edges based on given graph id                                                
Graph&lt;Long, VertexData, EdgeData&gt; subGraph = this.graph.subgraph(new VertexGraphContainmentFil | Graph&lt;Long, VD, ED&gt; subGraph = this.graph.subgraph(new VertexInGraphFilter&lt;VD&gt;(graphID),
DataSet&lt;Tuple1&lt;Long&gt;&gt; graphIDDataSet = env.fromCollection(Lists.newArrayList(new Tuple1&   DataSet&lt;Tuple1&lt;Long&gt;&gt; graphIDDataSet = env.fromCollection(Lists.newArrayList(new Tuple1&
// get graph data based on graph id                                                                    // get graph data based on graph id                                                                 
GraphData graphData = this.subgraphs.joinWithTiny(graphIDDataSet).where(GRAPH_ID).equalTo(0).with(ne | GD graphData = this.subgraphs.joinWithTiny(graphIDDataSet).where(new KeySelectors.GraphKeySelector&l
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
public GraphData join(Subgraph&lt;Long, GraphData&gt; g, Tuple1&lt;Long&gt; gID) throws Exception {  | public GD join(Subgraph&lt;Long, GD&gt; g, Tuple1&lt;Long&gt; gID) throws Exception {               
return g.getValue();                                                                                   return g.getValue();                                                                                
}                                                                                                      }                                                                                                   
}).first(1).collect().get(0);                                                                          }).first(1).collect().get(0);                                                                       
return EPGraph.fromGraph(subGraph, graphData);                                                       | return EPGraph.fromGraph(subGraph, graphData, vertexDataFactory, edgeDataFactory, graphDataFactory);
}                                                                                                      }                                                                                                   

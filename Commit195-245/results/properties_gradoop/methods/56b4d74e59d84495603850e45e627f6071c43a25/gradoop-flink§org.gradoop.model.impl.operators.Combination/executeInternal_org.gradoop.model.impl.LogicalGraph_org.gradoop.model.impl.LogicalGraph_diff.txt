/**                                                                                                    /**                                                                                                 
* {@inheritDoc}                                                                                        * {@inheritDoc}                                                                                     
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
protected LogicalGraph&lt;VD, ED, GD&gt; executeInternal(LogicalGraph&lt;VD, ED, GD&gt; firstGraph,    protected LogicalGraph&lt;VD, ED, GD&gt; executeInternal(LogicalGraph&lt;VD, ED, GD&gt; firstGraph, 
final Long newGraphID = FlinkConstants.COMBINE_GRAPH_ID;                                               final Long newGraphID = FlinkConstants.COMBINE_GRAPH_ID;                                            
Graph&lt;Long, VD, ED&gt; graph1 = firstGraph.getGellyGraph();                                       |                                                                                                     
Graph&lt;Long, VD, ED&gt; graph2 = secondGraph.getGellyGraph();                                      |                                                                                                     
// build distinct union of vertex sets and update graph ids at vertices                                // build distinct union of vertex sets and update graph ids at vertices                             
// cannot use Gelly union here because of missing argument for KeySelector                             // cannot use Gelly union here because of missing argument for KeySelector                          
DataSet&lt;Vertex&lt;Long, VD&gt;&gt; newVertexSet = graph1.getVertices().union(graph2.getVertices() | DataSet&lt;Vertex&lt;Long, VD&gt;&gt; newVertexSet = firstGraph.getVertices().union(secondGraph.getV
DataSet&lt;Edge&lt;Long, ED&gt;&gt; newEdgeSet = graph1.getEdges().union(graph2.getEdges()).distinct | DataSet&lt;Edge&lt;Long, ED&gt;&gt; newEdgeSet = firstGraph.getEdges().union(secondGraph.getEdges())
return LogicalGraph.fromGraph(Graph.fromDataSet(newVertexSet, newEdgeSet, graph1.getContext()), firs | return LogicalGraph.fromGellyGraph(Graph.fromDataSet(newVertexSet, newEdgeSet, newVertexSet.getExecu
}                                                                                                      }                                                                                                   

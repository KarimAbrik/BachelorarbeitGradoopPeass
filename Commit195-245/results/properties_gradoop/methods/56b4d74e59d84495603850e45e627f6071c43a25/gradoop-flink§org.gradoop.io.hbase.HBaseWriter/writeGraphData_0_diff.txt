/**                                                                                                    /**                                                                                                 
* Converts runtime graph data to persistent graph data (including vertex                               * Converts runtime graph data to persistent graph data (including vertex                            
* and edge identifiers) and writes it to HBase.                                                        * and edge identifiers) and writes it to HBase.                                                     
*                                                                                                      *                                                                                                   
* @param epgmDatabase               EPGM database instance                                             * @param epgmDatabase               EPGM database instance                                          
* @param graphDataHandler           graph data handler                                                 * @param graphDataHandler           graph data handler                                              
* @param persistentGraphDataFactory persistent graph data factory                                      * @param persistentGraphDataFactory persistent graph data factory                                   
* @param graphDataTableName         HBase graph data table name                                        * @param graphDataTableName         HBase graph data table name                                     
* @param &lt;PGD&gt;                      persistent graph data type                                   * @param &lt;PGD&gt;                      persistent graph data type                                
* @throws IOException                                                                                  * @throws IOException                                                                               
*/                                                                                                     */                                                                                                  
public &lt;PGD extends PersistentGraphData&gt; void writeGraphData(final EPGMDatabase&lt;VD, ED, GD&   public &lt;PGD extends PersistentGraphData&gt; void writeGraphData(final EPGMDatabase&lt;VD, ED, GD&
final Graph&lt;Long, VD, ED&gt; graph = epgmDatabase.getDatabaseGraph().getGellyGraph();             | final LogicalGraph&lt;VD, ED, GD&gt; graph = epgmDatabase.getDatabaseGraph();                       
// build (graph-id, vertex-id) tuples from vertices                                                    // build (graph-id, vertex-id) tuples from vertices                                                 
FlatMapOperator&lt;Vertex&lt;Long, VD&gt;, Tuple2&lt;Long, Long&gt;&gt; graphIdToVertexId = graph.ge   FlatMapOperator&lt;Vertex&lt;Long, VD&gt;, Tuple2&lt;Long, Long&gt;&gt; graphIdToVertexId = graph.ge
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
public void flatMap(Vertex&lt;Long, VD&gt; vertex, Collector&lt;Tuple2&lt;Long, Long&gt;&gt; collect   public void flatMap(Vertex&lt;Long, VD&gt; vertex, Collector&lt;Tuple2&lt;Long, Long&gt;&gt; collect
if (vertex.getValue().getGraphCount() &gt; 0) {                                                        if (vertex.getValue().getGraphCount() &gt; 0) {                                                     
for (Long graphID : vertex.getValue().getGraphs()) {                                                   for (Long graphID : vertex.getValue().getGraphs()) {                                                
collector.collect(new Tuple2&lt;&gt;(graphID, vertex.f0));                                             collector.collect(new Tuple2&lt;&gt;(graphID, vertex.f0));                                          
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
});                                                                                                    });                                                                                                 
// build (graph-id, edge-id) tuples from vertices                                                      // build (graph-id, edge-id) tuples from vertices                                                   
FlatMapOperator&lt;Edge&lt;Long, ED&gt;, Tuple2&lt;Long, Long&gt;&gt; graphIdToEdgeId = graph.getEdg   FlatMapOperator&lt;Edge&lt;Long, ED&gt;, Tuple2&lt;Long, Long&gt;&gt; graphIdToEdgeId = graph.getEdg
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
public void flatMap(Edge&lt;Long, ED&gt; edge, Collector&lt;Tuple2&lt;Long, Long&gt;&gt; collector)    public void flatMap(Edge&lt;Long, ED&gt; edge, Collector&lt;Tuple2&lt;Long, Long&gt;&gt; collector) 
if (edge.getValue().getGraphCount() &gt; 0) {                                                          if (edge.getValue().getGraphCount() &gt; 0) {                                                       
for (Long graphId : edge.getValue().getGraphs()) {                                                     for (Long graphId : edge.getValue().getGraphs()) {                                                  
collector.collect(new Tuple2&lt;&gt;(graphId, edge.getValue().getId()));                               collector.collect(new Tuple2&lt;&gt;(graphId, edge.getValue().getId()));                            
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
});                                                                                                    });                                                                                                 
// co-group (graph-id, vertex-id) and (graph-id, edge-id) tuples to                                    // co-group (graph-id, vertex-id) and (graph-id, edge-id) tuples to                                 
// (graph-id, {vertex-id}, {edge-id}) triples                                                          // (graph-id, {vertex-id}, {edge-id}) triples                                                       
CoGroupOperator&lt;Tuple2&lt;Long, Long&gt;, Tuple2&lt;Long, Long&gt;, Tuple3&lt;Long, Set&lt;Long&g   CoGroupOperator&lt;Tuple2&lt;Long, Long&gt;, Tuple2&lt;Long, Long&gt;, Tuple3&lt;Long, Set&lt;Long&g
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
public void coGroup(Iterable&lt;Tuple2&lt;Long, Long&gt;&gt; graphToVertexIds, Iterable&lt;Tuple2&lt   public void coGroup(Iterable&lt;Tuple2&lt;Long, Long&gt;&gt; graphToVertexIds, Iterable&lt;Tuple2&lt
Set&lt;Long&gt; vertexIds = Sets.newHashSet();                                                         Set&lt;Long&gt; vertexIds = Sets.newHashSet();                                                      
Set&lt;Long&gt; edgeIds = Sets.newHashSet();                                                           Set&lt;Long&gt; edgeIds = Sets.newHashSet();                                                        
Long graphId = null;                                                                                   Long graphId = null;                                                                                
boolean initialized = false;                                                                           boolean initialized = false;                                                                        
for (Tuple2&lt;Long, Long&gt; graphToVertexTuple : graphToVertexIds) {                                 for (Tuple2&lt;Long, Long&gt; graphToVertexTuple : graphToVertexIds) {                              
if (!initialized) {                                                                                    if (!initialized) {                                                                                 
graphId = graphToVertexTuple.f0;                                                                       graphId = graphToVertexTuple.f0;                                                                    
initialized = true;                                                                                    initialized = true;                                                                                 
}                                                                                                      }                                                                                                   
vertexIds.add(graphToVertexTuple.f1);                                                                  vertexIds.add(graphToVertexTuple.f1);                                                               
}                                                                                                      }                                                                                                   
for (Tuple2&lt;Long, Long&gt; graphToEdgeTuple : graphToEdgeIds) {                                     for (Tuple2&lt;Long, Long&gt; graphToEdgeTuple : graphToEdgeIds) {                                  
edgeIds.add(graphToEdgeTuple.f1);                                                                      edgeIds.add(graphToEdgeTuple.f1);                                                                   
}                                                                                                      }                                                                                                   
collector.collect(new Tuple3&lt;&gt;(graphId, vertexIds, edgeIds));                                    collector.collect(new Tuple3&lt;&gt;(graphId, vertexIds, edgeIds));                                 
}                                                                                                      }                                                                                                   
});                                                                                                    });                                                                                                 
// join (graph-id, {vertex-id}, {edge-id}) triples with                                                // join (graph-id, {vertex-id}, {edge-id}) triples with                                             
// (graph-id, graph-data) and build (persistent-graph-data)                                            // (graph-id, graph-data) and build (persistent-graph-data)                                         
JoinOperator.EquiJoin&lt;Tuple3&lt;Long, Set&lt;Long&gt;, Set&lt;Long&gt;&gt;, Subgraph&lt;Long, GD&   JoinOperator.EquiJoin&lt;Tuple3&lt;Long, Set&lt;Long&gt;, Set&lt;Long&gt;&gt;, Subgraph&lt;Long, GD&
// write (persistent-graph-data) to HBase table                                                        // write (persistent-graph-data) to HBase table                                                     
Job job = Job.getInstance();                                                                           Job job = Job.getInstance();                                                                        
job.getConfiguration().set(TableOutputFormat.OUTPUT_TABLE, graphDataTableName);                        job.getConfiguration().set(TableOutputFormat.OUTPUT_TABLE, graphDataTableName);                     
persistentGraphDataSet.map(new HBaseWriter.GraphDataToHBaseMapper&lt;&gt;(graphDataHandler)).output(   persistentGraphDataSet.map(new HBaseWriter.GraphDataToHBaseMapper&lt;&gt;(graphDataHandler)).output(
}                                                                                                      }                                                                                                   

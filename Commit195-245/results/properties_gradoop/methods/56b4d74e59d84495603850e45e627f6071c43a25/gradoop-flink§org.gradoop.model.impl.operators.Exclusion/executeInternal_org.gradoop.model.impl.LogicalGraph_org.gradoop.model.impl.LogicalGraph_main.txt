/**
 * {@inheritDoc}
 */
@Override
protected LogicalGraph<VD, ED, GD> executeInternal(LogicalGraph<VD, ED, GD> firstGraph, LogicalGraph<VD, ED, GD> secondGraph) {
    final Long newGraphID = FlinkConstants.EXCLUDE_GRAPH_ID;
    // union vertex sets, group by vertex id, filter vertices where the group
    // contains exactly one vertex which belongs to the graph, the operator is
    // called on
    DataSet<Vertex<Long, VD>> newVertexSet = firstGraph.getVertices().union(secondGraph.getVertices()).groupBy(new KeySelectors.VertexKeySelector<VD>()).reduceGroup(new VertexGroupReducer<VD>(1L, firstGraph.getId(), secondGraph.getId())).map(new VertexToGraphUpdater<VD>(newGraphID));
    JoinFunction<Edge<Long, ED>, Vertex<Long, VD>, Edge<Long, ED>> joinFunc = new JoinFunction<Edge<Long, ED>, Vertex<Long, VD>, Edge<Long, ED>>() {

        @Override
        public Edge<Long, ED> join(Edge<Long, ED> leftTuple, Vertex<Long, VD> rightTuple) throws Exception {
            return leftTuple;
        }
    };
    // In exclude(), we are only interested in edges that connect vertices
    // that are in the exclusion of the vertex sets. Thus, we join the edges
    // from the left graph with the new vertex set using source and target ids.
    DataSet<Edge<Long, ED>> newEdgeSet = firstGraph.getEdges().join(newVertexSet).where(new KeySelectors.EdgeSourceVertexKeySelector<ED>()).equalTo(new KeySelectors.VertexKeySelector<VD>()).with(joinFunc).join(newVertexSet).where(new KeySelectors.EdgeTargetVertexKeySelector<ED>()).equalTo(new KeySelectors.VertexKeySelector<VD>()).with(joinFunc).map(new EdgeToGraphUpdater<ED>(newGraphID));
    return LogicalGraph.fromDataSets(newVertexSet, newEdgeSet, firstGraph.getGraphDataFactory().createGraphData(newGraphID), firstGraph.getVertexDataFactory(), firstGraph.getEdgeDataFactory(), firstGraph.getGraphDataFactory());
}
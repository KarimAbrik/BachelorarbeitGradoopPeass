/**
 * Writes the EPGM database instance to HBase using the given arguments.
 *
 * HBase tables must be created before calling this method.
 *
 * @param epgmStore                   EPGM store to handle HBase
 * @param persistentVertexDataFactory persistent vertex data factory
 * @param persistentEdgeDataFactory   persistent edge data factory
 * @param persistentGraphDataFactory  persistent graph data factory
 * @param <PVD>                       persistent vertex data type
 * @param <PED>                       persistent edge data type
 * @param <PGD>                       persistent graph data type
 * @throws Exception
 */
public <PVD extends PersistentVertexData<ED>, PED extends PersistentEdgeData<VD>, PGD extends PersistentGraphData> void writeToHBase(EPGMStore<VD, ED, GD> epgmStore, final PersistentVertexDataFactory<VD, ED, PVD> persistentVertexDataFactory, final PersistentEdgeDataFactory<ED, VD, PED> persistentEdgeDataFactory, final PersistentGraphDataFactory<GD, PGD> persistentGraphDataFactory) throws Exception {
    HBaseWriter<VD, ED, GD> hBaseWriter = new HBaseWriter<>();
    // transform graph data to persistent graph data and write it
    hBaseWriter.writeGraphData(this, epgmStore.getGraphDataHandler(), persistentGraphDataFactory, epgmStore.getGraphDataTableName());
    env.execute();
    // transform vertex data to persistent vertex data and write it
    hBaseWriter.writeVertexData(this, epgmStore.getVertexDataHandler(), persistentVertexDataFactory, epgmStore.getVertexDataTableName());
    env.execute();
    // transform edge data to persistent edge data and write it
    hBaseWriter.writeEdgeData(this, epgmStore.getEdgeDataHandler(), persistentEdgeDataFactory, epgmStore.getEdgeDataTableName());
    env.execute();
}